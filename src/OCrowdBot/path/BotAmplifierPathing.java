// Inspired by https://github.com/IvanGeffner/battlecode2021/blob/master/thirtyone/BFSMuckraker.java
// Modified from https://github.com/mvpatel2000/Battlecode2022/blob/main/scripts/generate_pathing.py
// This file is automatically generated by gen_pathing.py. Do not edit.

package OCrowdBot.path;

import battlecode.common.*;

public class BotAmplifierPathing implements UnitPathing {
    
    RobotController rc;

    static MapLocation l107; // location representing relative coordinate (-5, 0)
    static MapInfo m107; // map info at location representing relative coordinate (-5, 0)
    static int d107; // shortest distance to location from current location
    static Direction dir107; // best direction to take now to optimally get to location

    static MapLocation l63; // location representing relative coordinate (-4, -3)
    static MapInfo m63; // map info at location representing relative coordinate (-4, -3)
    static int d63; // shortest distance to location from current location
    static Direction dir63; // best direction to take now to optimally get to location

    static MapLocation l78; // location representing relative coordinate (-4, -2)
    static MapInfo m78; // map info at location representing relative coordinate (-4, -2)
    static int d78; // shortest distance to location from current location
    static Direction dir78; // best direction to take now to optimally get to location

    static MapLocation l93; // location representing relative coordinate (-4, -1)
    static MapInfo m93; // map info at location representing relative coordinate (-4, -1)
    static int d93; // shortest distance to location from current location
    static Direction dir93; // best direction to take now to optimally get to location

    static MapLocation l108; // location representing relative coordinate (-4, 0)
    static MapInfo m108; // map info at location representing relative coordinate (-4, 0)
    static int d108; // shortest distance to location from current location
    static Direction dir108; // best direction to take now to optimally get to location

    static MapLocation l123; // location representing relative coordinate (-4, 1)
    static MapInfo m123; // map info at location representing relative coordinate (-4, 1)
    static int d123; // shortest distance to location from current location
    static Direction dir123; // best direction to take now to optimally get to location

    static MapLocation l138; // location representing relative coordinate (-4, 2)
    static MapInfo m138; // map info at location representing relative coordinate (-4, 2)
    static int d138; // shortest distance to location from current location
    static Direction dir138; // best direction to take now to optimally get to location

    static MapLocation l153; // location representing relative coordinate (-4, 3)
    static MapInfo m153; // map info at location representing relative coordinate (-4, 3)
    static int d153; // shortest distance to location from current location
    static Direction dir153; // best direction to take now to optimally get to location

    static MapLocation l49; // location representing relative coordinate (-3, -4)
    static MapInfo m49; // map info at location representing relative coordinate (-3, -4)
    static int d49; // shortest distance to location from current location
    static Direction dir49; // best direction to take now to optimally get to location

    static MapLocation l64; // location representing relative coordinate (-3, -3)
    static MapInfo m64; // map info at location representing relative coordinate (-3, -3)
    static int d64; // shortest distance to location from current location
    static Direction dir64; // best direction to take now to optimally get to location

    static MapLocation l79; // location representing relative coordinate (-3, -2)
    static MapInfo m79; // map info at location representing relative coordinate (-3, -2)
    static int d79; // shortest distance to location from current location
    static Direction dir79; // best direction to take now to optimally get to location

    static MapLocation l94; // location representing relative coordinate (-3, -1)
    static MapInfo m94; // map info at location representing relative coordinate (-3, -1)
    static int d94; // shortest distance to location from current location
    static Direction dir94; // best direction to take now to optimally get to location

    static MapLocation l109; // location representing relative coordinate (-3, 0)
    static MapInfo m109; // map info at location representing relative coordinate (-3, 0)
    static int d109; // shortest distance to location from current location
    static Direction dir109; // best direction to take now to optimally get to location

    static MapLocation l124; // location representing relative coordinate (-3, 1)
    static MapInfo m124; // map info at location representing relative coordinate (-3, 1)
    static int d124; // shortest distance to location from current location
    static Direction dir124; // best direction to take now to optimally get to location

    static MapLocation l139; // location representing relative coordinate (-3, 2)
    static MapInfo m139; // map info at location representing relative coordinate (-3, 2)
    static int d139; // shortest distance to location from current location
    static Direction dir139; // best direction to take now to optimally get to location

    static MapLocation l154; // location representing relative coordinate (-3, 3)
    static MapInfo m154; // map info at location representing relative coordinate (-3, 3)
    static int d154; // shortest distance to location from current location
    static Direction dir154; // best direction to take now to optimally get to location

    static MapLocation l169; // location representing relative coordinate (-3, 4)
    static MapInfo m169; // map info at location representing relative coordinate (-3, 4)
    static int d169; // shortest distance to location from current location
    static Direction dir169; // best direction to take now to optimally get to location

    static MapLocation l50; // location representing relative coordinate (-2, -4)
    static MapInfo m50; // map info at location representing relative coordinate (-2, -4)
    static int d50; // shortest distance to location from current location
    static Direction dir50; // best direction to take now to optimally get to location

    static MapLocation l65; // location representing relative coordinate (-2, -3)
    static MapInfo m65; // map info at location representing relative coordinate (-2, -3)
    static int d65; // shortest distance to location from current location
    static Direction dir65; // best direction to take now to optimally get to location

    static MapLocation l80; // location representing relative coordinate (-2, -2)
    static MapInfo m80; // map info at location representing relative coordinate (-2, -2)
    static int d80; // shortest distance to location from current location
    static Direction dir80; // best direction to take now to optimally get to location

    static MapLocation l95; // location representing relative coordinate (-2, -1)
    static MapInfo m95; // map info at location representing relative coordinate (-2, -1)
    static int d95; // shortest distance to location from current location
    static Direction dir95; // best direction to take now to optimally get to location

    static MapLocation l110; // location representing relative coordinate (-2, 0)
    static MapInfo m110; // map info at location representing relative coordinate (-2, 0)
    static int d110; // shortest distance to location from current location
    static Direction dir110; // best direction to take now to optimally get to location

    static MapLocation l125; // location representing relative coordinate (-2, 1)
    static MapInfo m125; // map info at location representing relative coordinate (-2, 1)
    static int d125; // shortest distance to location from current location
    static Direction dir125; // best direction to take now to optimally get to location

    static MapLocation l140; // location representing relative coordinate (-2, 2)
    static MapInfo m140; // map info at location representing relative coordinate (-2, 2)
    static int d140; // shortest distance to location from current location
    static Direction dir140; // best direction to take now to optimally get to location

    static MapLocation l155; // location representing relative coordinate (-2, 3)
    static MapInfo m155; // map info at location representing relative coordinate (-2, 3)
    static int d155; // shortest distance to location from current location
    static Direction dir155; // best direction to take now to optimally get to location

    static MapLocation l170; // location representing relative coordinate (-2, 4)
    static MapInfo m170; // map info at location representing relative coordinate (-2, 4)
    static int d170; // shortest distance to location from current location
    static Direction dir170; // best direction to take now to optimally get to location

    static MapLocation l51; // location representing relative coordinate (-1, -4)
    static MapInfo m51; // map info at location representing relative coordinate (-1, -4)
    static int d51; // shortest distance to location from current location
    static Direction dir51; // best direction to take now to optimally get to location

    static MapLocation l66; // location representing relative coordinate (-1, -3)
    static MapInfo m66; // map info at location representing relative coordinate (-1, -3)
    static int d66; // shortest distance to location from current location
    static Direction dir66; // best direction to take now to optimally get to location

    static MapLocation l81; // location representing relative coordinate (-1, -2)
    static MapInfo m81; // map info at location representing relative coordinate (-1, -2)
    static int d81; // shortest distance to location from current location
    static Direction dir81; // best direction to take now to optimally get to location

    static MapLocation l96; // location representing relative coordinate (-1, -1)
    static MapInfo m96; // map info at location representing relative coordinate (-1, -1)
    static int d96; // shortest distance to location from current location
    static Direction dir96; // best direction to take now to optimally get to location

    static MapLocation l111; // location representing relative coordinate (-1, 0)
    static MapInfo m111; // map info at location representing relative coordinate (-1, 0)
    static int d111; // shortest distance to location from current location
    static Direction dir111; // best direction to take now to optimally get to location

    static MapLocation l126; // location representing relative coordinate (-1, 1)
    static MapInfo m126; // map info at location representing relative coordinate (-1, 1)
    static int d126; // shortest distance to location from current location
    static Direction dir126; // best direction to take now to optimally get to location

    static MapLocation l141; // location representing relative coordinate (-1, 2)
    static MapInfo m141; // map info at location representing relative coordinate (-1, 2)
    static int d141; // shortest distance to location from current location
    static Direction dir141; // best direction to take now to optimally get to location

    static MapLocation l156; // location representing relative coordinate (-1, 3)
    static MapInfo m156; // map info at location representing relative coordinate (-1, 3)
    static int d156; // shortest distance to location from current location
    static Direction dir156; // best direction to take now to optimally get to location

    static MapLocation l171; // location representing relative coordinate (-1, 4)
    static MapInfo m171; // map info at location representing relative coordinate (-1, 4)
    static int d171; // shortest distance to location from current location
    static Direction dir171; // best direction to take now to optimally get to location

    static MapLocation l37; // location representing relative coordinate (0, -5)
    static MapInfo m37; // map info at location representing relative coordinate (0, -5)
    static int d37; // shortest distance to location from current location
    static Direction dir37; // best direction to take now to optimally get to location

    static MapLocation l52; // location representing relative coordinate (0, -4)
    static MapInfo m52; // map info at location representing relative coordinate (0, -4)
    static int d52; // shortest distance to location from current location
    static Direction dir52; // best direction to take now to optimally get to location

    static MapLocation l67; // location representing relative coordinate (0, -3)
    static MapInfo m67; // map info at location representing relative coordinate (0, -3)
    static int d67; // shortest distance to location from current location
    static Direction dir67; // best direction to take now to optimally get to location

    static MapLocation l82; // location representing relative coordinate (0, -2)
    static MapInfo m82; // map info at location representing relative coordinate (0, -2)
    static int d82; // shortest distance to location from current location
    static Direction dir82; // best direction to take now to optimally get to location

    static MapLocation l97; // location representing relative coordinate (0, -1)
    static MapInfo m97; // map info at location representing relative coordinate (0, -1)
    static int d97; // shortest distance to location from current location
    static Direction dir97; // best direction to take now to optimally get to location

    static MapLocation l112; // location representing relative coordinate (0, 0)
    static MapInfo m112; // map info at location representing relative coordinate (0, 0)
    static int d112; // shortest distance to location from current location
    static Direction dir112; // best direction to take now to optimally get to location

    static MapLocation l127; // location representing relative coordinate (0, 1)
    static MapInfo m127; // map info at location representing relative coordinate (0, 1)
    static int d127; // shortest distance to location from current location
    static Direction dir127; // best direction to take now to optimally get to location

    static MapLocation l142; // location representing relative coordinate (0, 2)
    static MapInfo m142; // map info at location representing relative coordinate (0, 2)
    static int d142; // shortest distance to location from current location
    static Direction dir142; // best direction to take now to optimally get to location

    static MapLocation l157; // location representing relative coordinate (0, 3)
    static MapInfo m157; // map info at location representing relative coordinate (0, 3)
    static int d157; // shortest distance to location from current location
    static Direction dir157; // best direction to take now to optimally get to location

    static MapLocation l172; // location representing relative coordinate (0, 4)
    static MapInfo m172; // map info at location representing relative coordinate (0, 4)
    static int d172; // shortest distance to location from current location
    static Direction dir172; // best direction to take now to optimally get to location

    static MapLocation l187; // location representing relative coordinate (0, 5)
    static MapInfo m187; // map info at location representing relative coordinate (0, 5)
    static int d187; // shortest distance to location from current location
    static Direction dir187; // best direction to take now to optimally get to location

    static MapLocation l53; // location representing relative coordinate (1, -4)
    static MapInfo m53; // map info at location representing relative coordinate (1, -4)
    static int d53; // shortest distance to location from current location
    static Direction dir53; // best direction to take now to optimally get to location

    static MapLocation l68; // location representing relative coordinate (1, -3)
    static MapInfo m68; // map info at location representing relative coordinate (1, -3)
    static int d68; // shortest distance to location from current location
    static Direction dir68; // best direction to take now to optimally get to location

    static MapLocation l83; // location representing relative coordinate (1, -2)
    static MapInfo m83; // map info at location representing relative coordinate (1, -2)
    static int d83; // shortest distance to location from current location
    static Direction dir83; // best direction to take now to optimally get to location

    static MapLocation l98; // location representing relative coordinate (1, -1)
    static MapInfo m98; // map info at location representing relative coordinate (1, -1)
    static int d98; // shortest distance to location from current location
    static Direction dir98; // best direction to take now to optimally get to location

    static MapLocation l113; // location representing relative coordinate (1, 0)
    static MapInfo m113; // map info at location representing relative coordinate (1, 0)
    static int d113; // shortest distance to location from current location
    static Direction dir113; // best direction to take now to optimally get to location

    static MapLocation l128; // location representing relative coordinate (1, 1)
    static MapInfo m128; // map info at location representing relative coordinate (1, 1)
    static int d128; // shortest distance to location from current location
    static Direction dir128; // best direction to take now to optimally get to location

    static MapLocation l143; // location representing relative coordinate (1, 2)
    static MapInfo m143; // map info at location representing relative coordinate (1, 2)
    static int d143; // shortest distance to location from current location
    static Direction dir143; // best direction to take now to optimally get to location

    static MapLocation l158; // location representing relative coordinate (1, 3)
    static MapInfo m158; // map info at location representing relative coordinate (1, 3)
    static int d158; // shortest distance to location from current location
    static Direction dir158; // best direction to take now to optimally get to location

    static MapLocation l173; // location representing relative coordinate (1, 4)
    static MapInfo m173; // map info at location representing relative coordinate (1, 4)
    static int d173; // shortest distance to location from current location
    static Direction dir173; // best direction to take now to optimally get to location

    static MapLocation l54; // location representing relative coordinate (2, -4)
    static MapInfo m54; // map info at location representing relative coordinate (2, -4)
    static int d54; // shortest distance to location from current location
    static Direction dir54; // best direction to take now to optimally get to location

    static MapLocation l69; // location representing relative coordinate (2, -3)
    static MapInfo m69; // map info at location representing relative coordinate (2, -3)
    static int d69; // shortest distance to location from current location
    static Direction dir69; // best direction to take now to optimally get to location

    static MapLocation l84; // location representing relative coordinate (2, -2)
    static MapInfo m84; // map info at location representing relative coordinate (2, -2)
    static int d84; // shortest distance to location from current location
    static Direction dir84; // best direction to take now to optimally get to location

    static MapLocation l99; // location representing relative coordinate (2, -1)
    static MapInfo m99; // map info at location representing relative coordinate (2, -1)
    static int d99; // shortest distance to location from current location
    static Direction dir99; // best direction to take now to optimally get to location

    static MapLocation l114; // location representing relative coordinate (2, 0)
    static MapInfo m114; // map info at location representing relative coordinate (2, 0)
    static int d114; // shortest distance to location from current location
    static Direction dir114; // best direction to take now to optimally get to location

    static MapLocation l129; // location representing relative coordinate (2, 1)
    static MapInfo m129; // map info at location representing relative coordinate (2, 1)
    static int d129; // shortest distance to location from current location
    static Direction dir129; // best direction to take now to optimally get to location

    static MapLocation l144; // location representing relative coordinate (2, 2)
    static MapInfo m144; // map info at location representing relative coordinate (2, 2)
    static int d144; // shortest distance to location from current location
    static Direction dir144; // best direction to take now to optimally get to location

    static MapLocation l159; // location representing relative coordinate (2, 3)
    static MapInfo m159; // map info at location representing relative coordinate (2, 3)
    static int d159; // shortest distance to location from current location
    static Direction dir159; // best direction to take now to optimally get to location

    static MapLocation l174; // location representing relative coordinate (2, 4)
    static MapInfo m174; // map info at location representing relative coordinate (2, 4)
    static int d174; // shortest distance to location from current location
    static Direction dir174; // best direction to take now to optimally get to location

    static MapLocation l55; // location representing relative coordinate (3, -4)
    static MapInfo m55; // map info at location representing relative coordinate (3, -4)
    static int d55; // shortest distance to location from current location
    static Direction dir55; // best direction to take now to optimally get to location

    static MapLocation l70; // location representing relative coordinate (3, -3)
    static MapInfo m70; // map info at location representing relative coordinate (3, -3)
    static int d70; // shortest distance to location from current location
    static Direction dir70; // best direction to take now to optimally get to location

    static MapLocation l85; // location representing relative coordinate (3, -2)
    static MapInfo m85; // map info at location representing relative coordinate (3, -2)
    static int d85; // shortest distance to location from current location
    static Direction dir85; // best direction to take now to optimally get to location

    static MapLocation l100; // location representing relative coordinate (3, -1)
    static MapInfo m100; // map info at location representing relative coordinate (3, -1)
    static int d100; // shortest distance to location from current location
    static Direction dir100; // best direction to take now to optimally get to location

    static MapLocation l115; // location representing relative coordinate (3, 0)
    static MapInfo m115; // map info at location representing relative coordinate (3, 0)
    static int d115; // shortest distance to location from current location
    static Direction dir115; // best direction to take now to optimally get to location

    static MapLocation l130; // location representing relative coordinate (3, 1)
    static MapInfo m130; // map info at location representing relative coordinate (3, 1)
    static int d130; // shortest distance to location from current location
    static Direction dir130; // best direction to take now to optimally get to location

    static MapLocation l145; // location representing relative coordinate (3, 2)
    static MapInfo m145; // map info at location representing relative coordinate (3, 2)
    static int d145; // shortest distance to location from current location
    static Direction dir145; // best direction to take now to optimally get to location

    static MapLocation l160; // location representing relative coordinate (3, 3)
    static MapInfo m160; // map info at location representing relative coordinate (3, 3)
    static int d160; // shortest distance to location from current location
    static Direction dir160; // best direction to take now to optimally get to location

    static MapLocation l175; // location representing relative coordinate (3, 4)
    static MapInfo m175; // map info at location representing relative coordinate (3, 4)
    static int d175; // shortest distance to location from current location
    static Direction dir175; // best direction to take now to optimally get to location

    static MapLocation l71; // location representing relative coordinate (4, -3)
    static MapInfo m71; // map info at location representing relative coordinate (4, -3)
    static int d71; // shortest distance to location from current location
    static Direction dir71; // best direction to take now to optimally get to location

    static MapLocation l86; // location representing relative coordinate (4, -2)
    static MapInfo m86; // map info at location representing relative coordinate (4, -2)
    static int d86; // shortest distance to location from current location
    static Direction dir86; // best direction to take now to optimally get to location

    static MapLocation l101; // location representing relative coordinate (4, -1)
    static MapInfo m101; // map info at location representing relative coordinate (4, -1)
    static int d101; // shortest distance to location from current location
    static Direction dir101; // best direction to take now to optimally get to location

    static MapLocation l116; // location representing relative coordinate (4, 0)
    static MapInfo m116; // map info at location representing relative coordinate (4, 0)
    static int d116; // shortest distance to location from current location
    static Direction dir116; // best direction to take now to optimally get to location

    static MapLocation l131; // location representing relative coordinate (4, 1)
    static MapInfo m131; // map info at location representing relative coordinate (4, 1)
    static int d131; // shortest distance to location from current location
    static Direction dir131; // best direction to take now to optimally get to location

    static MapLocation l146; // location representing relative coordinate (4, 2)
    static MapInfo m146; // map info at location representing relative coordinate (4, 2)
    static int d146; // shortest distance to location from current location
    static Direction dir146; // best direction to take now to optimally get to location

    static MapLocation l161; // location representing relative coordinate (4, 3)
    static MapInfo m161; // map info at location representing relative coordinate (4, 3)
    static int d161; // shortest distance to location from current location
    static Direction dir161; // best direction to take now to optimally get to location

    static MapLocation l117; // location representing relative coordinate (5, 0)
    static MapInfo m117; // map info at location representing relative coordinate (5, 0)
    static int d117; // shortest distance to location from current location
    static Direction dir117; // best direction to take now to optimally get to location


    public BotAmplifierPathing(RobotController rc) {
        this.rc = rc;
    }

    public int locationScore(MapLocation loc, MapInfo mapLoc, Direction inputDir) throws GameActionException {
        mapLoc = rc.senseMapInfo(loc);
        if (!mapLoc.isPassable())
            return 99999;
        if (inputDir == null)
            return 99999;
        if (mapLoc.getCurrentDirection().equals(inputDir.opposite()))
            return 99999;
        else if (mapLoc.getCurrentDirection().equals(inputDir))
            return 5;
        return (int) (mapLoc.getCooldownMultiplier(rc.getTeam()) * 10);
    }

    public Direction bestDir(MapLocation target) throws GameActionException {

        l112 = rc.getLocation();
        m112 = rc.senseMapInfo(l112);
        d112 = 0;
        dir112 = Direction.CENTER;

        l111 = l112.add(Direction.WEST); // (-1, 0) from (0, 0)
        d111 = 99999;
        dir111 = null;

        l97 = l112.add(Direction.SOUTH); // (0, -1) from (0, 0)
        d97 = 99999;
        dir97 = null;

        l127 = l112.add(Direction.NORTH); // (0, 1) from (0, 0)
        d127 = 99999;
        dir127 = null;

        l113 = l112.add(Direction.EAST); // (1, 0) from (0, 0)
        d113 = 99999;
        dir113 = null;

        l96 = l112.add(Direction.SOUTHWEST); // (-1, -1) from (0, 0)
        d96 = 99999;
        dir96 = null;

        l126 = l112.add(Direction.NORTHWEST); // (-1, 1) from (0, 0)
        d126 = 99999;
        dir126 = null;

        l98 = l112.add(Direction.SOUTHEAST); // (1, -1) from (0, 0)
        d98 = 99999;
        dir98 = null;

        l128 = l112.add(Direction.NORTHEAST); // (1, 1) from (0, 0)
        d128 = 99999;
        dir128 = null;

        l110 = l111.add(Direction.WEST); // (-2, 0) from (-1, 0)
        d110 = 99999;
        dir110 = null;

        l82 = l97.add(Direction.SOUTH); // (0, -2) from (0, -1)
        d82 = 99999;
        dir82 = null;

        l142 = l127.add(Direction.NORTH); // (0, 2) from (0, 1)
        d142 = 99999;
        dir142 = null;

        l114 = l113.add(Direction.EAST); // (2, 0) from (1, 0)
        d114 = 99999;
        dir114 = null;

        l95 = l111.add(Direction.SOUTHWEST); // (-2, -1) from (-1, 0)
        d95 = 99999;
        dir95 = null;

        l125 = l111.add(Direction.NORTHWEST); // (-2, 1) from (-1, 0)
        d125 = 99999;
        dir125 = null;

        l81 = l97.add(Direction.SOUTHWEST); // (-1, -2) from (0, -1)
        d81 = 99999;
        dir81 = null;

        l141 = l127.add(Direction.NORTHWEST); // (-1, 2) from (0, 1)
        d141 = 99999;
        dir141 = null;

        l83 = l97.add(Direction.SOUTHEAST); // (1, -2) from (0, -1)
        d83 = 99999;
        dir83 = null;

        l143 = l127.add(Direction.NORTHEAST); // (1, 2) from (0, 1)
        d143 = 99999;
        dir143 = null;

        l99 = l113.add(Direction.SOUTHEAST); // (2, -1) from (1, 0)
        d99 = 99999;
        dir99 = null;

        l129 = l113.add(Direction.NORTHEAST); // (2, 1) from (1, 0)
        d129 = 99999;
        dir129 = null;

        l80 = l96.add(Direction.SOUTHWEST); // (-2, -2) from (-1, -1)
        d80 = 99999;
        dir80 = null;

        l140 = l126.add(Direction.NORTHWEST); // (-2, 2) from (-1, 1)
        d140 = 99999;
        dir140 = null;

        l84 = l98.add(Direction.SOUTHEAST); // (2, -2) from (1, -1)
        d84 = 99999;
        dir84 = null;

        l144 = l128.add(Direction.NORTHEAST); // (2, 2) from (1, 1)
        d144 = 99999;
        dir144 = null;

        l109 = l110.add(Direction.WEST); // (-3, 0) from (-2, 0)
        d109 = 99999;
        dir109 = null;

        l67 = l82.add(Direction.SOUTH); // (0, -3) from (0, -2)
        d67 = 99999;
        dir67 = null;

        l157 = l142.add(Direction.NORTH); // (0, 3) from (0, 2)
        d157 = 99999;
        dir157 = null;

        l115 = l114.add(Direction.EAST); // (3, 0) from (2, 0)
        d115 = 99999;
        dir115 = null;

        l94 = l110.add(Direction.SOUTHWEST); // (-3, -1) from (-2, 0)
        d94 = 99999;
        dir94 = null;

        l124 = l110.add(Direction.NORTHWEST); // (-3, 1) from (-2, 0)
        d124 = 99999;
        dir124 = null;

        l66 = l82.add(Direction.SOUTHWEST); // (-1, -3) from (0, -2)
        d66 = 99999;
        dir66 = null;

        l156 = l142.add(Direction.NORTHWEST); // (-1, 3) from (0, 2)
        d156 = 99999;
        dir156 = null;

        l68 = l82.add(Direction.SOUTHEAST); // (1, -3) from (0, -2)
        d68 = 99999;
        dir68 = null;

        l158 = l142.add(Direction.NORTHEAST); // (1, 3) from (0, 2)
        d158 = 99999;
        dir158 = null;

        l100 = l114.add(Direction.SOUTHEAST); // (3, -1) from (2, 0)
        d100 = 99999;
        dir100 = null;

        l130 = l114.add(Direction.NORTHEAST); // (3, 1) from (2, 0)
        d130 = 99999;
        dir130 = null;

        l79 = l95.add(Direction.SOUTHWEST); // (-3, -2) from (-2, -1)
        d79 = 99999;
        dir79 = null;

        l139 = l125.add(Direction.NORTHWEST); // (-3, 2) from (-2, 1)
        d139 = 99999;
        dir139 = null;

        l65 = l81.add(Direction.SOUTHWEST); // (-2, -3) from (-1, -2)
        d65 = 99999;
        dir65 = null;

        l155 = l141.add(Direction.NORTHWEST); // (-2, 3) from (-1, 2)
        d155 = 99999;
        dir155 = null;

        l69 = l83.add(Direction.SOUTHEAST); // (2, -3) from (1, -2)
        d69 = 99999;
        dir69 = null;

        l159 = l143.add(Direction.NORTHEAST); // (2, 3) from (1, 2)
        d159 = 99999;
        dir159 = null;

        l85 = l99.add(Direction.SOUTHEAST); // (3, -2) from (2, -1)
        d85 = 99999;
        dir85 = null;

        l145 = l129.add(Direction.NORTHEAST); // (3, 2) from (2, 1)
        d145 = 99999;
        dir145 = null;

        l108 = l109.add(Direction.WEST); // (-4, 0) from (-3, 0)
        d108 = 99999;
        dir108 = null;

        l52 = l67.add(Direction.SOUTH); // (0, -4) from (0, -3)
        d52 = 99999;
        dir52 = null;

        l172 = l157.add(Direction.NORTH); // (0, 4) from (0, 3)
        d172 = 99999;
        dir172 = null;

        l116 = l115.add(Direction.EAST); // (4, 0) from (3, 0)
        d116 = 99999;
        dir116 = null;

        l93 = l109.add(Direction.SOUTHWEST); // (-4, -1) from (-3, 0)
        d93 = 99999;
        dir93 = null;

        l123 = l109.add(Direction.NORTHWEST); // (-4, 1) from (-3, 0)
        d123 = 99999;
        dir123 = null;

        l51 = l67.add(Direction.SOUTHWEST); // (-1, -4) from (0, -3)
        d51 = 99999;
        dir51 = null;

        l171 = l157.add(Direction.NORTHWEST); // (-1, 4) from (0, 3)
        d171 = 99999;
        dir171 = null;

        l53 = l67.add(Direction.SOUTHEAST); // (1, -4) from (0, -3)
        d53 = 99999;
        dir53 = null;

        l173 = l157.add(Direction.NORTHEAST); // (1, 4) from (0, 3)
        d173 = 99999;
        dir173 = null;

        l101 = l115.add(Direction.SOUTHEAST); // (4, -1) from (3, 0)
        d101 = 99999;
        dir101 = null;

        l131 = l115.add(Direction.NORTHEAST); // (4, 1) from (3, 0)
        d131 = 99999;
        dir131 = null;

        l64 = l80.add(Direction.SOUTHWEST); // (-3, -3) from (-2, -2)
        d64 = 99999;
        dir64 = null;

        l154 = l140.add(Direction.NORTHWEST); // (-3, 3) from (-2, 2)
        d154 = 99999;
        dir154 = null;

        l70 = l84.add(Direction.SOUTHEAST); // (3, -3) from (2, -2)
        d70 = 99999;
        dir70 = null;

        l160 = l144.add(Direction.NORTHEAST); // (3, 3) from (2, 2)
        d160 = 99999;
        dir160 = null;

        l78 = l94.add(Direction.SOUTHWEST); // (-4, -2) from (-3, -1)
        d78 = 99999;
        dir78 = null;

        l138 = l124.add(Direction.NORTHWEST); // (-4, 2) from (-3, 1)
        d138 = 99999;
        dir138 = null;

        l50 = l66.add(Direction.SOUTHWEST); // (-2, -4) from (-1, -3)
        d50 = 99999;
        dir50 = null;

        l170 = l156.add(Direction.NORTHWEST); // (-2, 4) from (-1, 3)
        d170 = 99999;
        dir170 = null;

        l54 = l68.add(Direction.SOUTHEAST); // (2, -4) from (1, -3)
        d54 = 99999;
        dir54 = null;

        l174 = l158.add(Direction.NORTHEAST); // (2, 4) from (1, 3)
        d174 = 99999;
        dir174 = null;

        l86 = l100.add(Direction.SOUTHEAST); // (4, -2) from (3, -1)
        d86 = 99999;
        dir86 = null;

        l146 = l130.add(Direction.NORTHEAST); // (4, 2) from (3, 1)
        d146 = 99999;
        dir146 = null;

        l107 = l108.add(Direction.WEST); // (-5, 0) from (-4, 0)
        d107 = 99999;
        dir107 = null;

        l63 = l79.add(Direction.SOUTHWEST); // (-4, -3) from (-3, -2)
        d63 = 99999;
        dir63 = null;

        l153 = l139.add(Direction.NORTHWEST); // (-4, 3) from (-3, 2)
        d153 = 99999;
        dir153 = null;

        l49 = l65.add(Direction.SOUTHWEST); // (-3, -4) from (-2, -3)
        d49 = 99999;
        dir49 = null;

        l169 = l155.add(Direction.NORTHWEST); // (-3, 4) from (-2, 3)
        d169 = 99999;
        dir169 = null;

        l37 = l52.add(Direction.SOUTH); // (0, -5) from (0, -4)
        d37 = 99999;
        dir37 = null;

        l187 = l172.add(Direction.NORTH); // (0, 5) from (0, 4)
        d187 = 99999;
        dir187 = null;

        l55 = l69.add(Direction.SOUTHEAST); // (3, -4) from (2, -3)
        d55 = 99999;
        dir55 = null;

        l175 = l159.add(Direction.NORTHEAST); // (3, 4) from (2, 3)
        d175 = 99999;
        dir175 = null;

        l71 = l85.add(Direction.SOUTHEAST); // (4, -3) from (3, -2)
        d71 = 99999;
        dir71 = null;

        l161 = l145.add(Direction.NORTHEAST); // (4, 3) from (3, 2)
        d161 = 99999;
        dir161 = null;

        l117 = l116.add(Direction.EAST); // (5, 0) from (4, 0)
        d117 = 99999;
        dir117 = null;



        if (rc.canSenseLocation(l111)) { // check (-1, 0)
            if (!rc.isLocationOccupied(l111)) { 
                if (d111 > d112) { // from (0, 0)
                    d111 = d112;
                    dir111 = Direction.WEST;
                }
                d111 += locationScore(l111, m111, dir111);
            }
        }
        else if (rc.onTheMap(l111)) { // check (-1, 0)
            if (!rc.isLocationOccupied(l111)) { 
                if (d111 > d112) { // from (0, 0)
                    d111 = d112;
                    dir111 = Direction.WEST;
                }
                d111 += 12;
            }
        }

        if (rc.canSenseLocation(l97)) { // check (0, -1)
            if (!rc.isLocationOccupied(l97)) { 
                if (d97 > d112) { // from (0, 0)
                    d97 = d112;
                    dir97 = Direction.SOUTH;
                }
                if (d97 > d111) { // from (-1, 0)
                    d97 = d111;
                    dir97 = dir111;
                }
                d97 += locationScore(l97, m97, dir97);
            }
        }
        else if (rc.onTheMap(l97)) { // check (0, -1)
            if (!rc.isLocationOccupied(l97)) { 
                if (d97 > d112) { // from (0, 0)
                    d97 = d112;
                    dir97 = Direction.SOUTH;
                }
                if (d97 > d111) { // from (-1, 0)
                    d97 = d111;
                    dir97 = dir111;
                }
                d97 += 12;
            }
        }

        if (rc.canSenseLocation(l127)) { // check (0, 1)
            if (!rc.isLocationOccupied(l127)) { 
                if (d127 > d112) { // from (0, 0)
                    d127 = d112;
                    dir127 = Direction.NORTH;
                }
                if (d127 > d111) { // from (-1, 0)
                    d127 = d111;
                    dir127 = dir111;
                }
                d127 += locationScore(l127, m127, dir127);
            }
        }
        else if (rc.onTheMap(l127)) { // check (0, 1)
            if (!rc.isLocationOccupied(l127)) { 
                if (d127 > d112) { // from (0, 0)
                    d127 = d112;
                    dir127 = Direction.NORTH;
                }
                if (d127 > d111) { // from (-1, 0)
                    d127 = d111;
                    dir127 = dir111;
                }
                d127 += 12;
            }
        }

        if (rc.canSenseLocation(l113)) { // check (1, 0)
            if (!rc.isLocationOccupied(l113)) { 
                if (d113 > d112) { // from (0, 0)
                    d113 = d112;
                    dir113 = Direction.EAST;
                }
                if (d113 > d97) { // from (0, -1)
                    d113 = d97;
                    dir113 = dir97;
                }
                if (d113 > d127) { // from (0, 1)
                    d113 = d127;
                    dir113 = dir127;
                }
                d113 += locationScore(l113, m113, dir113);
            }
        }
        else if (rc.onTheMap(l113)) { // check (1, 0)
            if (!rc.isLocationOccupied(l113)) { 
                if (d113 > d112) { // from (0, 0)
                    d113 = d112;
                    dir113 = Direction.EAST;
                }
                if (d113 > d97) { // from (0, -1)
                    d113 = d97;
                    dir113 = dir97;
                }
                if (d113 > d127) { // from (0, 1)
                    d113 = d127;
                    dir113 = dir127;
                }
                d113 += 12;
            }
        }

        if (rc.canSenseLocation(l96)) { // check (-1, -1)
            if (!rc.isLocationOccupied(l96)) { 
                if (d96 > d112) { // from (0, 0)
                    d96 = d112;
                    dir96 = Direction.SOUTHWEST;
                }
                if (d96 > d111) { // from (-1, 0)
                    d96 = d111;
                    dir96 = dir111;
                }
                if (d96 > d97) { // from (0, -1)
                    d96 = d97;
                    dir96 = dir97;
                }
                d96 += locationScore(l96, m96, dir96);
            }
        }
        else if (rc.onTheMap(l96)) { // check (-1, -1)
            if (!rc.isLocationOccupied(l96)) { 
                if (d96 > d112) { // from (0, 0)
                    d96 = d112;
                    dir96 = Direction.SOUTHWEST;
                }
                if (d96 > d111) { // from (-1, 0)
                    d96 = d111;
                    dir96 = dir111;
                }
                if (d96 > d97) { // from (0, -1)
                    d96 = d97;
                    dir96 = dir97;
                }
                d96 += 12;
            }
        }

        if (rc.canSenseLocation(l126)) { // check (-1, 1)
            if (!rc.isLocationOccupied(l126)) { 
                if (d126 > d112) { // from (0, 0)
                    d126 = d112;
                    dir126 = Direction.NORTHWEST;
                }
                if (d126 > d111) { // from (-1, 0)
                    d126 = d111;
                    dir126 = dir111;
                }
                if (d126 > d127) { // from (0, 1)
                    d126 = d127;
                    dir126 = dir127;
                }
                d126 += locationScore(l126, m126, dir126);
            }
        }
        else if (rc.onTheMap(l126)) { // check (-1, 1)
            if (!rc.isLocationOccupied(l126)) { 
                if (d126 > d112) { // from (0, 0)
                    d126 = d112;
                    dir126 = Direction.NORTHWEST;
                }
                if (d126 > d111) { // from (-1, 0)
                    d126 = d111;
                    dir126 = dir111;
                }
                if (d126 > d127) { // from (0, 1)
                    d126 = d127;
                    dir126 = dir127;
                }
                d126 += 12;
            }
        }

        if (rc.canSenseLocation(l98)) { // check (1, -1)
            if (!rc.isLocationOccupied(l98)) { 
                if (d98 > d112) { // from (0, 0)
                    d98 = d112;
                    dir98 = Direction.SOUTHEAST;
                }
                if (d98 > d97) { // from (0, -1)
                    d98 = d97;
                    dir98 = dir97;
                }
                if (d98 > d113) { // from (1, 0)
                    d98 = d113;
                    dir98 = dir113;
                }
                d98 += locationScore(l98, m98, dir98);
            }
        }
        else if (rc.onTheMap(l98)) { // check (1, -1)
            if (!rc.isLocationOccupied(l98)) { 
                if (d98 > d112) { // from (0, 0)
                    d98 = d112;
                    dir98 = Direction.SOUTHEAST;
                }
                if (d98 > d97) { // from (0, -1)
                    d98 = d97;
                    dir98 = dir97;
                }
                if (d98 > d113) { // from (1, 0)
                    d98 = d113;
                    dir98 = dir113;
                }
                d98 += 12;
            }
        }

        if (rc.canSenseLocation(l128)) { // check (1, 1)
            if (!rc.isLocationOccupied(l128)) { 
                if (d128 > d112) { // from (0, 0)
                    d128 = d112;
                    dir128 = Direction.NORTHEAST;
                }
                if (d128 > d127) { // from (0, 1)
                    d128 = d127;
                    dir128 = dir127;
                }
                if (d128 > d113) { // from (1, 0)
                    d128 = d113;
                    dir128 = dir113;
                }
                d128 += locationScore(l128, m128, dir128);
            }
        }
        else if (rc.onTheMap(l128)) { // check (1, 1)
            if (!rc.isLocationOccupied(l128)) { 
                if (d128 > d112) { // from (0, 0)
                    d128 = d112;
                    dir128 = Direction.NORTHEAST;
                }
                if (d128 > d127) { // from (0, 1)
                    d128 = d127;
                    dir128 = dir127;
                }
                if (d128 > d113) { // from (1, 0)
                    d128 = d113;
                    dir128 = dir113;
                }
                d128 += 12;
            }
        }

        if (rc.canSenseLocation(l110)) { // check (-2, 0)
            if (d110 > d111) { // from (-1, 0)
                d110 = d111;
                dir110 = dir111;
            }
            if (d110 > d96) { // from (-1, -1)
                d110 = d96;
                dir110 = dir96;
            }
            if (d110 > d126) { // from (-1, 1)
                d110 = d126;
                dir110 = dir126;
            }
            d110 += locationScore(l110, m110, dir110);
        }
        else if (rc.onTheMap(l110)) { // check (-2, 0)
            if (d110 > d111) { // from (-1, 0)
                d110 = d111;
                dir110 = dir111;
            }
            if (d110 > d96) { // from (-1, -1)
                d110 = d96;
                dir110 = dir96;
            }
            if (d110 > d126) { // from (-1, 1)
                d110 = d126;
                dir110 = dir126;
            }
            d110 += 12;
        }

        if (rc.canSenseLocation(l82)) { // check (0, -2)
            if (d82 > d97) { // from (0, -1)
                d82 = d97;
                dir82 = dir97;
            }
            if (d82 > d96) { // from (-1, -1)
                d82 = d96;
                dir82 = dir96;
            }
            if (d82 > d98) { // from (1, -1)
                d82 = d98;
                dir82 = dir98;
            }
            d82 += locationScore(l82, m82, dir82);
        }
        else if (rc.onTheMap(l82)) { // check (0, -2)
            if (d82 > d97) { // from (0, -1)
                d82 = d97;
                dir82 = dir97;
            }
            if (d82 > d96) { // from (-1, -1)
                d82 = d96;
                dir82 = dir96;
            }
            if (d82 > d98) { // from (1, -1)
                d82 = d98;
                dir82 = dir98;
            }
            d82 += 12;
        }

        if (rc.canSenseLocation(l142)) { // check (0, 2)
            if (d142 > d127) { // from (0, 1)
                d142 = d127;
                dir142 = dir127;
            }
            if (d142 > d126) { // from (-1, 1)
                d142 = d126;
                dir142 = dir126;
            }
            if (d142 > d128) { // from (1, 1)
                d142 = d128;
                dir142 = dir128;
            }
            d142 += locationScore(l142, m142, dir142);
        }
        else if (rc.onTheMap(l142)) { // check (0, 2)
            if (d142 > d127) { // from (0, 1)
                d142 = d127;
                dir142 = dir127;
            }
            if (d142 > d126) { // from (-1, 1)
                d142 = d126;
                dir142 = dir126;
            }
            if (d142 > d128) { // from (1, 1)
                d142 = d128;
                dir142 = dir128;
            }
            d142 += 12;
        }

        if (rc.canSenseLocation(l114)) { // check (2, 0)
            if (d114 > d113) { // from (1, 0)
                d114 = d113;
                dir114 = dir113;
            }
            if (d114 > d98) { // from (1, -1)
                d114 = d98;
                dir114 = dir98;
            }
            if (d114 > d128) { // from (1, 1)
                d114 = d128;
                dir114 = dir128;
            }
            d114 += locationScore(l114, m114, dir114);
        }
        else if (rc.onTheMap(l114)) { // check (2, 0)
            if (d114 > d113) { // from (1, 0)
                d114 = d113;
                dir114 = dir113;
            }
            if (d114 > d98) { // from (1, -1)
                d114 = d98;
                dir114 = dir98;
            }
            if (d114 > d128) { // from (1, 1)
                d114 = d128;
                dir114 = dir128;
            }
            d114 += 12;
        }

        if (rc.canSenseLocation(l95)) { // check (-2, -1)
            if (d95 > d111) { // from (-1, 0)
                d95 = d111;
                dir95 = dir111;
            }
            if (d95 > d96) { // from (-1, -1)
                d95 = d96;
                dir95 = dir96;
            }
            if (d95 > d110) { // from (-2, 0)
                d95 = d110;
                dir95 = dir110;
            }
            d95 += locationScore(l95, m95, dir95);
        }
        else if (rc.onTheMap(l95)) { // check (-2, -1)
            if (d95 > d111) { // from (-1, 0)
                d95 = d111;
                dir95 = dir111;
            }
            if (d95 > d96) { // from (-1, -1)
                d95 = d96;
                dir95 = dir96;
            }
            if (d95 > d110) { // from (-2, 0)
                d95 = d110;
                dir95 = dir110;
            }
            d95 += 12;
        }

        if (rc.canSenseLocation(l125)) { // check (-2, 1)
            if (d125 > d111) { // from (-1, 0)
                d125 = d111;
                dir125 = dir111;
            }
            if (d125 > d126) { // from (-1, 1)
                d125 = d126;
                dir125 = dir126;
            }
            if (d125 > d110) { // from (-2, 0)
                d125 = d110;
                dir125 = dir110;
            }
            d125 += locationScore(l125, m125, dir125);
        }
        else if (rc.onTheMap(l125)) { // check (-2, 1)
            if (d125 > d111) { // from (-1, 0)
                d125 = d111;
                dir125 = dir111;
            }
            if (d125 > d126) { // from (-1, 1)
                d125 = d126;
                dir125 = dir126;
            }
            if (d125 > d110) { // from (-2, 0)
                d125 = d110;
                dir125 = dir110;
            }
            d125 += 12;
        }

        if (rc.canSenseLocation(l81)) { // check (-1, -2)
            if (d81 > d97) { // from (0, -1)
                d81 = d97;
                dir81 = dir97;
            }
            if (d81 > d96) { // from (-1, -1)
                d81 = d96;
                dir81 = dir96;
            }
            if (d81 > d82) { // from (0, -2)
                d81 = d82;
                dir81 = dir82;
            }
            if (d81 > d95) { // from (-2, -1)
                d81 = d95;
                dir81 = dir95;
            }
            d81 += locationScore(l81, m81, dir81);
        }
        else if (rc.onTheMap(l81)) { // check (-1, -2)
            if (d81 > d97) { // from (0, -1)
                d81 = d97;
                dir81 = dir97;
            }
            if (d81 > d96) { // from (-1, -1)
                d81 = d96;
                dir81 = dir96;
            }
            if (d81 > d82) { // from (0, -2)
                d81 = d82;
                dir81 = dir82;
            }
            if (d81 > d95) { // from (-2, -1)
                d81 = d95;
                dir81 = dir95;
            }
            d81 += 12;
        }

        if (rc.canSenseLocation(l141)) { // check (-1, 2)
            if (d141 > d127) { // from (0, 1)
                d141 = d127;
                dir141 = dir127;
            }
            if (d141 > d126) { // from (-1, 1)
                d141 = d126;
                dir141 = dir126;
            }
            if (d141 > d142) { // from (0, 2)
                d141 = d142;
                dir141 = dir142;
            }
            if (d141 > d125) { // from (-2, 1)
                d141 = d125;
                dir141 = dir125;
            }
            d141 += locationScore(l141, m141, dir141);
        }
        else if (rc.onTheMap(l141)) { // check (-1, 2)
            if (d141 > d127) { // from (0, 1)
                d141 = d127;
                dir141 = dir127;
            }
            if (d141 > d126) { // from (-1, 1)
                d141 = d126;
                dir141 = dir126;
            }
            if (d141 > d142) { // from (0, 2)
                d141 = d142;
                dir141 = dir142;
            }
            if (d141 > d125) { // from (-2, 1)
                d141 = d125;
                dir141 = dir125;
            }
            d141 += 12;
        }

        if (rc.canSenseLocation(l83)) { // check (1, -2)
            if (d83 > d97) { // from (0, -1)
                d83 = d97;
                dir83 = dir97;
            }
            if (d83 > d98) { // from (1, -1)
                d83 = d98;
                dir83 = dir98;
            }
            if (d83 > d82) { // from (0, -2)
                d83 = d82;
                dir83 = dir82;
            }
            d83 += locationScore(l83, m83, dir83);
        }
        else if (rc.onTheMap(l83)) { // check (1, -2)
            if (d83 > d97) { // from (0, -1)
                d83 = d97;
                dir83 = dir97;
            }
            if (d83 > d98) { // from (1, -1)
                d83 = d98;
                dir83 = dir98;
            }
            if (d83 > d82) { // from (0, -2)
                d83 = d82;
                dir83 = dir82;
            }
            d83 += 12;
        }

        if (rc.canSenseLocation(l143)) { // check (1, 2)
            if (d143 > d127) { // from (0, 1)
                d143 = d127;
                dir143 = dir127;
            }
            if (d143 > d128) { // from (1, 1)
                d143 = d128;
                dir143 = dir128;
            }
            if (d143 > d142) { // from (0, 2)
                d143 = d142;
                dir143 = dir142;
            }
            d143 += locationScore(l143, m143, dir143);
        }
        else if (rc.onTheMap(l143)) { // check (1, 2)
            if (d143 > d127) { // from (0, 1)
                d143 = d127;
                dir143 = dir127;
            }
            if (d143 > d128) { // from (1, 1)
                d143 = d128;
                dir143 = dir128;
            }
            if (d143 > d142) { // from (0, 2)
                d143 = d142;
                dir143 = dir142;
            }
            d143 += 12;
        }

        if (rc.canSenseLocation(l99)) { // check (2, -1)
            if (d99 > d113) { // from (1, 0)
                d99 = d113;
                dir99 = dir113;
            }
            if (d99 > d98) { // from (1, -1)
                d99 = d98;
                dir99 = dir98;
            }
            if (d99 > d114) { // from (2, 0)
                d99 = d114;
                dir99 = dir114;
            }
            if (d99 > d83) { // from (1, -2)
                d99 = d83;
                dir99 = dir83;
            }
            d99 += locationScore(l99, m99, dir99);
        }
        else if (rc.onTheMap(l99)) { // check (2, -1)
            if (d99 > d113) { // from (1, 0)
                d99 = d113;
                dir99 = dir113;
            }
            if (d99 > d98) { // from (1, -1)
                d99 = d98;
                dir99 = dir98;
            }
            if (d99 > d114) { // from (2, 0)
                d99 = d114;
                dir99 = dir114;
            }
            if (d99 > d83) { // from (1, -2)
                d99 = d83;
                dir99 = dir83;
            }
            d99 += 12;
        }

        if (rc.canSenseLocation(l129)) { // check (2, 1)
            if (d129 > d113) { // from (1, 0)
                d129 = d113;
                dir129 = dir113;
            }
            if (d129 > d128) { // from (1, 1)
                d129 = d128;
                dir129 = dir128;
            }
            if (d129 > d114) { // from (2, 0)
                d129 = d114;
                dir129 = dir114;
            }
            if (d129 > d143) { // from (1, 2)
                d129 = d143;
                dir129 = dir143;
            }
            d129 += locationScore(l129, m129, dir129);
        }
        else if (rc.onTheMap(l129)) { // check (2, 1)
            if (d129 > d113) { // from (1, 0)
                d129 = d113;
                dir129 = dir113;
            }
            if (d129 > d128) { // from (1, 1)
                d129 = d128;
                dir129 = dir128;
            }
            if (d129 > d114) { // from (2, 0)
                d129 = d114;
                dir129 = dir114;
            }
            if (d129 > d143) { // from (1, 2)
                d129 = d143;
                dir129 = dir143;
            }
            d129 += 12;
        }

        if (rc.canSenseLocation(l80)) { // check (-2, -2)
            if (d80 > d96) { // from (-1, -1)
                d80 = d96;
                dir80 = dir96;
            }
            if (d80 > d95) { // from (-2, -1)
                d80 = d95;
                dir80 = dir95;
            }
            if (d80 > d81) { // from (-1, -2)
                d80 = d81;
                dir80 = dir81;
            }
            d80 += locationScore(l80, m80, dir80);
        }
        else if (rc.onTheMap(l80)) { // check (-2, -2)
            if (d80 > d96) { // from (-1, -1)
                d80 = d96;
                dir80 = dir96;
            }
            if (d80 > d95) { // from (-2, -1)
                d80 = d95;
                dir80 = dir95;
            }
            if (d80 > d81) { // from (-1, -2)
                d80 = d81;
                dir80 = dir81;
            }
            d80 += 12;
        }

        if (rc.canSenseLocation(l140)) { // check (-2, 2)
            if (d140 > d126) { // from (-1, 1)
                d140 = d126;
                dir140 = dir126;
            }
            if (d140 > d125) { // from (-2, 1)
                d140 = d125;
                dir140 = dir125;
            }
            if (d140 > d141) { // from (-1, 2)
                d140 = d141;
                dir140 = dir141;
            }
            d140 += locationScore(l140, m140, dir140);
        }
        else if (rc.onTheMap(l140)) { // check (-2, 2)
            if (d140 > d126) { // from (-1, 1)
                d140 = d126;
                dir140 = dir126;
            }
            if (d140 > d125) { // from (-2, 1)
                d140 = d125;
                dir140 = dir125;
            }
            if (d140 > d141) { // from (-1, 2)
                d140 = d141;
                dir140 = dir141;
            }
            d140 += 12;
        }

        if (rc.canSenseLocation(l84)) { // check (2, -2)
            if (d84 > d98) { // from (1, -1)
                d84 = d98;
                dir84 = dir98;
            }
            if (d84 > d83) { // from (1, -2)
                d84 = d83;
                dir84 = dir83;
            }
            if (d84 > d99) { // from (2, -1)
                d84 = d99;
                dir84 = dir99;
            }
            d84 += locationScore(l84, m84, dir84);
        }
        else if (rc.onTheMap(l84)) { // check (2, -2)
            if (d84 > d98) { // from (1, -1)
                d84 = d98;
                dir84 = dir98;
            }
            if (d84 > d83) { // from (1, -2)
                d84 = d83;
                dir84 = dir83;
            }
            if (d84 > d99) { // from (2, -1)
                d84 = d99;
                dir84 = dir99;
            }
            d84 += 12;
        }

        if (rc.canSenseLocation(l144)) { // check (2, 2)
            if (d144 > d128) { // from (1, 1)
                d144 = d128;
                dir144 = dir128;
            }
            if (d144 > d143) { // from (1, 2)
                d144 = d143;
                dir144 = dir143;
            }
            if (d144 > d129) { // from (2, 1)
                d144 = d129;
                dir144 = dir129;
            }
            d144 += locationScore(l144, m144, dir144);
        }
        else if (rc.onTheMap(l144)) { // check (2, 2)
            if (d144 > d128) { // from (1, 1)
                d144 = d128;
                dir144 = dir128;
            }
            if (d144 > d143) { // from (1, 2)
                d144 = d143;
                dir144 = dir143;
            }
            if (d144 > d129) { // from (2, 1)
                d144 = d129;
                dir144 = dir129;
            }
            d144 += 12;
        }

        if (rc.canSenseLocation(l109)) { // check (-3, 0)
            if (d109 > d110) { // from (-2, 0)
                d109 = d110;
                dir109 = dir110;
            }
            if (d109 > d95) { // from (-2, -1)
                d109 = d95;
                dir109 = dir95;
            }
            if (d109 > d125) { // from (-2, 1)
                d109 = d125;
                dir109 = dir125;
            }
            d109 += locationScore(l109, m109, dir109);
        }
        else if (rc.onTheMap(l109)) { // check (-3, 0)
            if (d109 > d110) { // from (-2, 0)
                d109 = d110;
                dir109 = dir110;
            }
            if (d109 > d95) { // from (-2, -1)
                d109 = d95;
                dir109 = dir95;
            }
            if (d109 > d125) { // from (-2, 1)
                d109 = d125;
                dir109 = dir125;
            }
            d109 += 12;
        }

        if (rc.canSenseLocation(l67)) { // check (0, -3)
            if (d67 > d82) { // from (0, -2)
                d67 = d82;
                dir67 = dir82;
            }
            if (d67 > d81) { // from (-1, -2)
                d67 = d81;
                dir67 = dir81;
            }
            if (d67 > d83) { // from (1, -2)
                d67 = d83;
                dir67 = dir83;
            }
            d67 += locationScore(l67, m67, dir67);
        }
        else if (rc.onTheMap(l67)) { // check (0, -3)
            if (d67 > d82) { // from (0, -2)
                d67 = d82;
                dir67 = dir82;
            }
            if (d67 > d81) { // from (-1, -2)
                d67 = d81;
                dir67 = dir81;
            }
            if (d67 > d83) { // from (1, -2)
                d67 = d83;
                dir67 = dir83;
            }
            d67 += 12;
        }

        if (rc.canSenseLocation(l157)) { // check (0, 3)
            if (d157 > d142) { // from (0, 2)
                d157 = d142;
                dir157 = dir142;
            }
            if (d157 > d141) { // from (-1, 2)
                d157 = d141;
                dir157 = dir141;
            }
            if (d157 > d143) { // from (1, 2)
                d157 = d143;
                dir157 = dir143;
            }
            d157 += locationScore(l157, m157, dir157);
        }
        else if (rc.onTheMap(l157)) { // check (0, 3)
            if (d157 > d142) { // from (0, 2)
                d157 = d142;
                dir157 = dir142;
            }
            if (d157 > d141) { // from (-1, 2)
                d157 = d141;
                dir157 = dir141;
            }
            if (d157 > d143) { // from (1, 2)
                d157 = d143;
                dir157 = dir143;
            }
            d157 += 12;
        }

        if (rc.canSenseLocation(l115)) { // check (3, 0)
            if (d115 > d114) { // from (2, 0)
                d115 = d114;
                dir115 = dir114;
            }
            if (d115 > d99) { // from (2, -1)
                d115 = d99;
                dir115 = dir99;
            }
            if (d115 > d129) { // from (2, 1)
                d115 = d129;
                dir115 = dir129;
            }
            d115 += locationScore(l115, m115, dir115);
        }
        else if (rc.onTheMap(l115)) { // check (3, 0)
            if (d115 > d114) { // from (2, 0)
                d115 = d114;
                dir115 = dir114;
            }
            if (d115 > d99) { // from (2, -1)
                d115 = d99;
                dir115 = dir99;
            }
            if (d115 > d129) { // from (2, 1)
                d115 = d129;
                dir115 = dir129;
            }
            d115 += 12;
        }

        if (rc.canSenseLocation(l94)) { // check (-3, -1)
            if (d94 > d110) { // from (-2, 0)
                d94 = d110;
                dir94 = dir110;
            }
            if (d94 > d95) { // from (-2, -1)
                d94 = d95;
                dir94 = dir95;
            }
            if (d94 > d80) { // from (-2, -2)
                d94 = d80;
                dir94 = dir80;
            }
            if (d94 > d109) { // from (-3, 0)
                d94 = d109;
                dir94 = dir109;
            }
            d94 += locationScore(l94, m94, dir94);
        }
        else if (rc.onTheMap(l94)) { // check (-3, -1)
            if (d94 > d110) { // from (-2, 0)
                d94 = d110;
                dir94 = dir110;
            }
            if (d94 > d95) { // from (-2, -1)
                d94 = d95;
                dir94 = dir95;
            }
            if (d94 > d80) { // from (-2, -2)
                d94 = d80;
                dir94 = dir80;
            }
            if (d94 > d109) { // from (-3, 0)
                d94 = d109;
                dir94 = dir109;
            }
            d94 += 12;
        }

        if (rc.canSenseLocation(l124)) { // check (-3, 1)
            if (d124 > d110) { // from (-2, 0)
                d124 = d110;
                dir124 = dir110;
            }
            if (d124 > d125) { // from (-2, 1)
                d124 = d125;
                dir124 = dir125;
            }
            if (d124 > d140) { // from (-2, 2)
                d124 = d140;
                dir124 = dir140;
            }
            if (d124 > d109) { // from (-3, 0)
                d124 = d109;
                dir124 = dir109;
            }
            d124 += locationScore(l124, m124, dir124);
        }
        else if (rc.onTheMap(l124)) { // check (-3, 1)
            if (d124 > d110) { // from (-2, 0)
                d124 = d110;
                dir124 = dir110;
            }
            if (d124 > d125) { // from (-2, 1)
                d124 = d125;
                dir124 = dir125;
            }
            if (d124 > d140) { // from (-2, 2)
                d124 = d140;
                dir124 = dir140;
            }
            if (d124 > d109) { // from (-3, 0)
                d124 = d109;
                dir124 = dir109;
            }
            d124 += 12;
        }

        if (rc.canSenseLocation(l66)) { // check (-1, -3)
            if (d66 > d82) { // from (0, -2)
                d66 = d82;
                dir66 = dir82;
            }
            if (d66 > d81) { // from (-1, -2)
                d66 = d81;
                dir66 = dir81;
            }
            if (d66 > d80) { // from (-2, -2)
                d66 = d80;
                dir66 = dir80;
            }
            if (d66 > d67) { // from (0, -3)
                d66 = d67;
                dir66 = dir67;
            }
            d66 += locationScore(l66, m66, dir66);
        }
        else if (rc.onTheMap(l66)) { // check (-1, -3)
            if (d66 > d82) { // from (0, -2)
                d66 = d82;
                dir66 = dir82;
            }
            if (d66 > d81) { // from (-1, -2)
                d66 = d81;
                dir66 = dir81;
            }
            if (d66 > d80) { // from (-2, -2)
                d66 = d80;
                dir66 = dir80;
            }
            if (d66 > d67) { // from (0, -3)
                d66 = d67;
                dir66 = dir67;
            }
            d66 += 12;
        }

        if (rc.canSenseLocation(l156)) { // check (-1, 3)
            if (d156 > d142) { // from (0, 2)
                d156 = d142;
                dir156 = dir142;
            }
            if (d156 > d141) { // from (-1, 2)
                d156 = d141;
                dir156 = dir141;
            }
            if (d156 > d140) { // from (-2, 2)
                d156 = d140;
                dir156 = dir140;
            }
            if (d156 > d157) { // from (0, 3)
                d156 = d157;
                dir156 = dir157;
            }
            d156 += locationScore(l156, m156, dir156);
        }
        else if (rc.onTheMap(l156)) { // check (-1, 3)
            if (d156 > d142) { // from (0, 2)
                d156 = d142;
                dir156 = dir142;
            }
            if (d156 > d141) { // from (-1, 2)
                d156 = d141;
                dir156 = dir141;
            }
            if (d156 > d140) { // from (-2, 2)
                d156 = d140;
                dir156 = dir140;
            }
            if (d156 > d157) { // from (0, 3)
                d156 = d157;
                dir156 = dir157;
            }
            d156 += 12;
        }

        if (rc.canSenseLocation(l68)) { // check (1, -3)
            if (d68 > d82) { // from (0, -2)
                d68 = d82;
                dir68 = dir82;
            }
            if (d68 > d83) { // from (1, -2)
                d68 = d83;
                dir68 = dir83;
            }
            if (d68 > d84) { // from (2, -2)
                d68 = d84;
                dir68 = dir84;
            }
            if (d68 > d67) { // from (0, -3)
                d68 = d67;
                dir68 = dir67;
            }
            d68 += locationScore(l68, m68, dir68);
        }
        else if (rc.onTheMap(l68)) { // check (1, -3)
            if (d68 > d82) { // from (0, -2)
                d68 = d82;
                dir68 = dir82;
            }
            if (d68 > d83) { // from (1, -2)
                d68 = d83;
                dir68 = dir83;
            }
            if (d68 > d84) { // from (2, -2)
                d68 = d84;
                dir68 = dir84;
            }
            if (d68 > d67) { // from (0, -3)
                d68 = d67;
                dir68 = dir67;
            }
            d68 += 12;
        }

        if (rc.canSenseLocation(l158)) { // check (1, 3)
            if (d158 > d142) { // from (0, 2)
                d158 = d142;
                dir158 = dir142;
            }
            if (d158 > d143) { // from (1, 2)
                d158 = d143;
                dir158 = dir143;
            }
            if (d158 > d144) { // from (2, 2)
                d158 = d144;
                dir158 = dir144;
            }
            if (d158 > d157) { // from (0, 3)
                d158 = d157;
                dir158 = dir157;
            }
            d158 += locationScore(l158, m158, dir158);
        }
        else if (rc.onTheMap(l158)) { // check (1, 3)
            if (d158 > d142) { // from (0, 2)
                d158 = d142;
                dir158 = dir142;
            }
            if (d158 > d143) { // from (1, 2)
                d158 = d143;
                dir158 = dir143;
            }
            if (d158 > d144) { // from (2, 2)
                d158 = d144;
                dir158 = dir144;
            }
            if (d158 > d157) { // from (0, 3)
                d158 = d157;
                dir158 = dir157;
            }
            d158 += 12;
        }

        if (rc.canSenseLocation(l100)) { // check (3, -1)
            if (d100 > d114) { // from (2, 0)
                d100 = d114;
                dir100 = dir114;
            }
            if (d100 > d99) { // from (2, -1)
                d100 = d99;
                dir100 = dir99;
            }
            if (d100 > d84) { // from (2, -2)
                d100 = d84;
                dir100 = dir84;
            }
            if (d100 > d115) { // from (3, 0)
                d100 = d115;
                dir100 = dir115;
            }
            d100 += locationScore(l100, m100, dir100);
        }
        else if (rc.onTheMap(l100)) { // check (3, -1)
            if (d100 > d114) { // from (2, 0)
                d100 = d114;
                dir100 = dir114;
            }
            if (d100 > d99) { // from (2, -1)
                d100 = d99;
                dir100 = dir99;
            }
            if (d100 > d84) { // from (2, -2)
                d100 = d84;
                dir100 = dir84;
            }
            if (d100 > d115) { // from (3, 0)
                d100 = d115;
                dir100 = dir115;
            }
            d100 += 12;
        }

        if (rc.canSenseLocation(l130)) { // check (3, 1)
            if (d130 > d114) { // from (2, 0)
                d130 = d114;
                dir130 = dir114;
            }
            if (d130 > d129) { // from (2, 1)
                d130 = d129;
                dir130 = dir129;
            }
            if (d130 > d144) { // from (2, 2)
                d130 = d144;
                dir130 = dir144;
            }
            if (d130 > d115) { // from (3, 0)
                d130 = d115;
                dir130 = dir115;
            }
            d130 += locationScore(l130, m130, dir130);
        }
        else if (rc.onTheMap(l130)) { // check (3, 1)
            if (d130 > d114) { // from (2, 0)
                d130 = d114;
                dir130 = dir114;
            }
            if (d130 > d129) { // from (2, 1)
                d130 = d129;
                dir130 = dir129;
            }
            if (d130 > d144) { // from (2, 2)
                d130 = d144;
                dir130 = dir144;
            }
            if (d130 > d115) { // from (3, 0)
                d130 = d115;
                dir130 = dir115;
            }
            d130 += 12;
        }

        if (rc.canSenseLocation(l79)) { // check (-3, -2)
            if (d79 > d95) { // from (-2, -1)
                d79 = d95;
                dir79 = dir95;
            }
            if (d79 > d80) { // from (-2, -2)
                d79 = d80;
                dir79 = dir80;
            }
            if (d79 > d94) { // from (-3, -1)
                d79 = d94;
                dir79 = dir94;
            }
            d79 += locationScore(l79, m79, dir79);
        }
        else if (rc.onTheMap(l79)) { // check (-3, -2)
            if (d79 > d95) { // from (-2, -1)
                d79 = d95;
                dir79 = dir95;
            }
            if (d79 > d80) { // from (-2, -2)
                d79 = d80;
                dir79 = dir80;
            }
            if (d79 > d94) { // from (-3, -1)
                d79 = d94;
                dir79 = dir94;
            }
            d79 += 12;
        }

        if (rc.canSenseLocation(l139)) { // check (-3, 2)
            if (d139 > d125) { // from (-2, 1)
                d139 = d125;
                dir139 = dir125;
            }
            if (d139 > d140) { // from (-2, 2)
                d139 = d140;
                dir139 = dir140;
            }
            if (d139 > d124) { // from (-3, 1)
                d139 = d124;
                dir139 = dir124;
            }
            d139 += locationScore(l139, m139, dir139);
        }
        else if (rc.onTheMap(l139)) { // check (-3, 2)
            if (d139 > d125) { // from (-2, 1)
                d139 = d125;
                dir139 = dir125;
            }
            if (d139 > d140) { // from (-2, 2)
                d139 = d140;
                dir139 = dir140;
            }
            if (d139 > d124) { // from (-3, 1)
                d139 = d124;
                dir139 = dir124;
            }
            d139 += 12;
        }

        if (rc.canSenseLocation(l65)) { // check (-2, -3)
            if (d65 > d81) { // from (-1, -2)
                d65 = d81;
                dir65 = dir81;
            }
            if (d65 > d80) { // from (-2, -2)
                d65 = d80;
                dir65 = dir80;
            }
            if (d65 > d66) { // from (-1, -3)
                d65 = d66;
                dir65 = dir66;
            }
            if (d65 > d79) { // from (-3, -2)
                d65 = d79;
                dir65 = dir79;
            }
            d65 += locationScore(l65, m65, dir65);
        }
        else if (rc.onTheMap(l65)) { // check (-2, -3)
            if (d65 > d81) { // from (-1, -2)
                d65 = d81;
                dir65 = dir81;
            }
            if (d65 > d80) { // from (-2, -2)
                d65 = d80;
                dir65 = dir80;
            }
            if (d65 > d66) { // from (-1, -3)
                d65 = d66;
                dir65 = dir66;
            }
            if (d65 > d79) { // from (-3, -2)
                d65 = d79;
                dir65 = dir79;
            }
            d65 += 12;
        }

        if (rc.canSenseLocation(l155)) { // check (-2, 3)
            if (d155 > d141) { // from (-1, 2)
                d155 = d141;
                dir155 = dir141;
            }
            if (d155 > d140) { // from (-2, 2)
                d155 = d140;
                dir155 = dir140;
            }
            if (d155 > d156) { // from (-1, 3)
                d155 = d156;
                dir155 = dir156;
            }
            if (d155 > d139) { // from (-3, 2)
                d155 = d139;
                dir155 = dir139;
            }
            d155 += locationScore(l155, m155, dir155);
        }
        else if (rc.onTheMap(l155)) { // check (-2, 3)
            if (d155 > d141) { // from (-1, 2)
                d155 = d141;
                dir155 = dir141;
            }
            if (d155 > d140) { // from (-2, 2)
                d155 = d140;
                dir155 = dir140;
            }
            if (d155 > d156) { // from (-1, 3)
                d155 = d156;
                dir155 = dir156;
            }
            if (d155 > d139) { // from (-3, 2)
                d155 = d139;
                dir155 = dir139;
            }
            d155 += 12;
        }

        if (rc.canSenseLocation(l69)) { // check (2, -3)
            if (d69 > d83) { // from (1, -2)
                d69 = d83;
                dir69 = dir83;
            }
            if (d69 > d84) { // from (2, -2)
                d69 = d84;
                dir69 = dir84;
            }
            if (d69 > d68) { // from (1, -3)
                d69 = d68;
                dir69 = dir68;
            }
            d69 += locationScore(l69, m69, dir69);
        }
        else if (rc.onTheMap(l69)) { // check (2, -3)
            if (d69 > d83) { // from (1, -2)
                d69 = d83;
                dir69 = dir83;
            }
            if (d69 > d84) { // from (2, -2)
                d69 = d84;
                dir69 = dir84;
            }
            if (d69 > d68) { // from (1, -3)
                d69 = d68;
                dir69 = dir68;
            }
            d69 += 12;
        }

        if (rc.canSenseLocation(l159)) { // check (2, 3)
            if (d159 > d143) { // from (1, 2)
                d159 = d143;
                dir159 = dir143;
            }
            if (d159 > d144) { // from (2, 2)
                d159 = d144;
                dir159 = dir144;
            }
            if (d159 > d158) { // from (1, 3)
                d159 = d158;
                dir159 = dir158;
            }
            d159 += locationScore(l159, m159, dir159);
        }
        else if (rc.onTheMap(l159)) { // check (2, 3)
            if (d159 > d143) { // from (1, 2)
                d159 = d143;
                dir159 = dir143;
            }
            if (d159 > d144) { // from (2, 2)
                d159 = d144;
                dir159 = dir144;
            }
            if (d159 > d158) { // from (1, 3)
                d159 = d158;
                dir159 = dir158;
            }
            d159 += 12;
        }

        if (rc.canSenseLocation(l85)) { // check (3, -2)
            if (d85 > d99) { // from (2, -1)
                d85 = d99;
                dir85 = dir99;
            }
            if (d85 > d84) { // from (2, -2)
                d85 = d84;
                dir85 = dir84;
            }
            if (d85 > d100) { // from (3, -1)
                d85 = d100;
                dir85 = dir100;
            }
            if (d85 > d69) { // from (2, -3)
                d85 = d69;
                dir85 = dir69;
            }
            d85 += locationScore(l85, m85, dir85);
        }
        else if (rc.onTheMap(l85)) { // check (3, -2)
            if (d85 > d99) { // from (2, -1)
                d85 = d99;
                dir85 = dir99;
            }
            if (d85 > d84) { // from (2, -2)
                d85 = d84;
                dir85 = dir84;
            }
            if (d85 > d100) { // from (3, -1)
                d85 = d100;
                dir85 = dir100;
            }
            if (d85 > d69) { // from (2, -3)
                d85 = d69;
                dir85 = dir69;
            }
            d85 += 12;
        }

        if (rc.canSenseLocation(l145)) { // check (3, 2)
            if (d145 > d129) { // from (2, 1)
                d145 = d129;
                dir145 = dir129;
            }
            if (d145 > d144) { // from (2, 2)
                d145 = d144;
                dir145 = dir144;
            }
            if (d145 > d130) { // from (3, 1)
                d145 = d130;
                dir145 = dir130;
            }
            if (d145 > d159) { // from (2, 3)
                d145 = d159;
                dir145 = dir159;
            }
            d145 += locationScore(l145, m145, dir145);
        }
        else if (rc.onTheMap(l145)) { // check (3, 2)
            if (d145 > d129) { // from (2, 1)
                d145 = d129;
                dir145 = dir129;
            }
            if (d145 > d144) { // from (2, 2)
                d145 = d144;
                dir145 = dir144;
            }
            if (d145 > d130) { // from (3, 1)
                d145 = d130;
                dir145 = dir130;
            }
            if (d145 > d159) { // from (2, 3)
                d145 = d159;
                dir145 = dir159;
            }
            d145 += 12;
        }

        if (rc.canSenseLocation(l108)) { // check (-4, 0)
            if (d108 > d109) { // from (-3, 0)
                d108 = d109;
                dir108 = dir109;
            }
            if (d108 > d94) { // from (-3, -1)
                d108 = d94;
                dir108 = dir94;
            }
            if (d108 > d124) { // from (-3, 1)
                d108 = d124;
                dir108 = dir124;
            }
            d108 += locationScore(l108, m108, dir108);
        }
        else if (rc.onTheMap(l108)) { // check (-4, 0)
            if (d108 > d109) { // from (-3, 0)
                d108 = d109;
                dir108 = dir109;
            }
            if (d108 > d94) { // from (-3, -1)
                d108 = d94;
                dir108 = dir94;
            }
            if (d108 > d124) { // from (-3, 1)
                d108 = d124;
                dir108 = dir124;
            }
            d108 += 12;
        }

        if (rc.canSenseLocation(l52)) { // check (0, -4)
            if (d52 > d67) { // from (0, -3)
                d52 = d67;
                dir52 = dir67;
            }
            if (d52 > d66) { // from (-1, -3)
                d52 = d66;
                dir52 = dir66;
            }
            if (d52 > d68) { // from (1, -3)
                d52 = d68;
                dir52 = dir68;
            }
            d52 += locationScore(l52, m52, dir52);
        }
        else if (rc.onTheMap(l52)) { // check (0, -4)
            if (d52 > d67) { // from (0, -3)
                d52 = d67;
                dir52 = dir67;
            }
            if (d52 > d66) { // from (-1, -3)
                d52 = d66;
                dir52 = dir66;
            }
            if (d52 > d68) { // from (1, -3)
                d52 = d68;
                dir52 = dir68;
            }
            d52 += 12;
        }

        if (rc.canSenseLocation(l172)) { // check (0, 4)
            if (d172 > d157) { // from (0, 3)
                d172 = d157;
                dir172 = dir157;
            }
            if (d172 > d156) { // from (-1, 3)
                d172 = d156;
                dir172 = dir156;
            }
            if (d172 > d158) { // from (1, 3)
                d172 = d158;
                dir172 = dir158;
            }
            d172 += locationScore(l172, m172, dir172);
        }
        else if (rc.onTheMap(l172)) { // check (0, 4)
            if (d172 > d157) { // from (0, 3)
                d172 = d157;
                dir172 = dir157;
            }
            if (d172 > d156) { // from (-1, 3)
                d172 = d156;
                dir172 = dir156;
            }
            if (d172 > d158) { // from (1, 3)
                d172 = d158;
                dir172 = dir158;
            }
            d172 += 12;
        }

        if (rc.canSenseLocation(l116)) { // check (4, 0)
            if (d116 > d115) { // from (3, 0)
                d116 = d115;
                dir116 = dir115;
            }
            if (d116 > d100) { // from (3, -1)
                d116 = d100;
                dir116 = dir100;
            }
            if (d116 > d130) { // from (3, 1)
                d116 = d130;
                dir116 = dir130;
            }
            d116 += locationScore(l116, m116, dir116);
        }
        else if (rc.onTheMap(l116)) { // check (4, 0)
            if (d116 > d115) { // from (3, 0)
                d116 = d115;
                dir116 = dir115;
            }
            if (d116 > d100) { // from (3, -1)
                d116 = d100;
                dir116 = dir100;
            }
            if (d116 > d130) { // from (3, 1)
                d116 = d130;
                dir116 = dir130;
            }
            d116 += 12;
        }

        if (rc.canSenseLocation(l93)) { // check (-4, -1)
            if (d93 > d109) { // from (-3, 0)
                d93 = d109;
                dir93 = dir109;
            }
            if (d93 > d94) { // from (-3, -1)
                d93 = d94;
                dir93 = dir94;
            }
            if (d93 > d79) { // from (-3, -2)
                d93 = d79;
                dir93 = dir79;
            }
            if (d93 > d108) { // from (-4, 0)
                d93 = d108;
                dir93 = dir108;
            }
            d93 += locationScore(l93, m93, dir93);
        }
        else if (rc.onTheMap(l93)) { // check (-4, -1)
            if (d93 > d109) { // from (-3, 0)
                d93 = d109;
                dir93 = dir109;
            }
            if (d93 > d94) { // from (-3, -1)
                d93 = d94;
                dir93 = dir94;
            }
            if (d93 > d79) { // from (-3, -2)
                d93 = d79;
                dir93 = dir79;
            }
            if (d93 > d108) { // from (-4, 0)
                d93 = d108;
                dir93 = dir108;
            }
            d93 += 12;
        }

        if (rc.canSenseLocation(l123)) { // check (-4, 1)
            if (d123 > d109) { // from (-3, 0)
                d123 = d109;
                dir123 = dir109;
            }
            if (d123 > d124) { // from (-3, 1)
                d123 = d124;
                dir123 = dir124;
            }
            if (d123 > d139) { // from (-3, 2)
                d123 = d139;
                dir123 = dir139;
            }
            if (d123 > d108) { // from (-4, 0)
                d123 = d108;
                dir123 = dir108;
            }
            d123 += locationScore(l123, m123, dir123);
        }
        else if (rc.onTheMap(l123)) { // check (-4, 1)
            if (d123 > d109) { // from (-3, 0)
                d123 = d109;
                dir123 = dir109;
            }
            if (d123 > d124) { // from (-3, 1)
                d123 = d124;
                dir123 = dir124;
            }
            if (d123 > d139) { // from (-3, 2)
                d123 = d139;
                dir123 = dir139;
            }
            if (d123 > d108) { // from (-4, 0)
                d123 = d108;
                dir123 = dir108;
            }
            d123 += 12;
        }

        if (rc.canSenseLocation(l51)) { // check (-1, -4)
            if (d51 > d67) { // from (0, -3)
                d51 = d67;
                dir51 = dir67;
            }
            if (d51 > d66) { // from (-1, -3)
                d51 = d66;
                dir51 = dir66;
            }
            if (d51 > d65) { // from (-2, -3)
                d51 = d65;
                dir51 = dir65;
            }
            if (d51 > d52) { // from (0, -4)
                d51 = d52;
                dir51 = dir52;
            }
            d51 += locationScore(l51, m51, dir51);
        }
        else if (rc.onTheMap(l51)) { // check (-1, -4)
            if (d51 > d67) { // from (0, -3)
                d51 = d67;
                dir51 = dir67;
            }
            if (d51 > d66) { // from (-1, -3)
                d51 = d66;
                dir51 = dir66;
            }
            if (d51 > d65) { // from (-2, -3)
                d51 = d65;
                dir51 = dir65;
            }
            if (d51 > d52) { // from (0, -4)
                d51 = d52;
                dir51 = dir52;
            }
            d51 += 12;
        }

        if (rc.canSenseLocation(l171)) { // check (-1, 4)
            if (d171 > d157) { // from (0, 3)
                d171 = d157;
                dir171 = dir157;
            }
            if (d171 > d156) { // from (-1, 3)
                d171 = d156;
                dir171 = dir156;
            }
            if (d171 > d155) { // from (-2, 3)
                d171 = d155;
                dir171 = dir155;
            }
            if (d171 > d172) { // from (0, 4)
                d171 = d172;
                dir171 = dir172;
            }
            d171 += locationScore(l171, m171, dir171);
        }
        else if (rc.onTheMap(l171)) { // check (-1, 4)
            if (d171 > d157) { // from (0, 3)
                d171 = d157;
                dir171 = dir157;
            }
            if (d171 > d156) { // from (-1, 3)
                d171 = d156;
                dir171 = dir156;
            }
            if (d171 > d155) { // from (-2, 3)
                d171 = d155;
                dir171 = dir155;
            }
            if (d171 > d172) { // from (0, 4)
                d171 = d172;
                dir171 = dir172;
            }
            d171 += 12;
        }

        if (rc.canSenseLocation(l53)) { // check (1, -4)
            if (d53 > d67) { // from (0, -3)
                d53 = d67;
                dir53 = dir67;
            }
            if (d53 > d68) { // from (1, -3)
                d53 = d68;
                dir53 = dir68;
            }
            if (d53 > d69) { // from (2, -3)
                d53 = d69;
                dir53 = dir69;
            }
            if (d53 > d52) { // from (0, -4)
                d53 = d52;
                dir53 = dir52;
            }
            d53 += locationScore(l53, m53, dir53);
        }
        else if (rc.onTheMap(l53)) { // check (1, -4)
            if (d53 > d67) { // from (0, -3)
                d53 = d67;
                dir53 = dir67;
            }
            if (d53 > d68) { // from (1, -3)
                d53 = d68;
                dir53 = dir68;
            }
            if (d53 > d69) { // from (2, -3)
                d53 = d69;
                dir53 = dir69;
            }
            if (d53 > d52) { // from (0, -4)
                d53 = d52;
                dir53 = dir52;
            }
            d53 += 12;
        }

        if (rc.canSenseLocation(l173)) { // check (1, 4)
            if (d173 > d157) { // from (0, 3)
                d173 = d157;
                dir173 = dir157;
            }
            if (d173 > d158) { // from (1, 3)
                d173 = d158;
                dir173 = dir158;
            }
            if (d173 > d159) { // from (2, 3)
                d173 = d159;
                dir173 = dir159;
            }
            if (d173 > d172) { // from (0, 4)
                d173 = d172;
                dir173 = dir172;
            }
            d173 += locationScore(l173, m173, dir173);
        }
        else if (rc.onTheMap(l173)) { // check (1, 4)
            if (d173 > d157) { // from (0, 3)
                d173 = d157;
                dir173 = dir157;
            }
            if (d173 > d158) { // from (1, 3)
                d173 = d158;
                dir173 = dir158;
            }
            if (d173 > d159) { // from (2, 3)
                d173 = d159;
                dir173 = dir159;
            }
            if (d173 > d172) { // from (0, 4)
                d173 = d172;
                dir173 = dir172;
            }
            d173 += 12;
        }

        if (rc.canSenseLocation(l101)) { // check (4, -1)
            if (d101 > d115) { // from (3, 0)
                d101 = d115;
                dir101 = dir115;
            }
            if (d101 > d100) { // from (3, -1)
                d101 = d100;
                dir101 = dir100;
            }
            if (d101 > d85) { // from (3, -2)
                d101 = d85;
                dir101 = dir85;
            }
            if (d101 > d116) { // from (4, 0)
                d101 = d116;
                dir101 = dir116;
            }
            d101 += locationScore(l101, m101, dir101);
        }
        else if (rc.onTheMap(l101)) { // check (4, -1)
            if (d101 > d115) { // from (3, 0)
                d101 = d115;
                dir101 = dir115;
            }
            if (d101 > d100) { // from (3, -1)
                d101 = d100;
                dir101 = dir100;
            }
            if (d101 > d85) { // from (3, -2)
                d101 = d85;
                dir101 = dir85;
            }
            if (d101 > d116) { // from (4, 0)
                d101 = d116;
                dir101 = dir116;
            }
            d101 += 12;
        }

        if (rc.canSenseLocation(l131)) { // check (4, 1)
            if (d131 > d115) { // from (3, 0)
                d131 = d115;
                dir131 = dir115;
            }
            if (d131 > d130) { // from (3, 1)
                d131 = d130;
                dir131 = dir130;
            }
            if (d131 > d145) { // from (3, 2)
                d131 = d145;
                dir131 = dir145;
            }
            if (d131 > d116) { // from (4, 0)
                d131 = d116;
                dir131 = dir116;
            }
            d131 += locationScore(l131, m131, dir131);
        }
        else if (rc.onTheMap(l131)) { // check (4, 1)
            if (d131 > d115) { // from (3, 0)
                d131 = d115;
                dir131 = dir115;
            }
            if (d131 > d130) { // from (3, 1)
                d131 = d130;
                dir131 = dir130;
            }
            if (d131 > d145) { // from (3, 2)
                d131 = d145;
                dir131 = dir145;
            }
            if (d131 > d116) { // from (4, 0)
                d131 = d116;
                dir131 = dir116;
            }
            d131 += 12;
        }

        if (rc.canSenseLocation(l64)) { // check (-3, -3)
            if (d64 > d80) { // from (-2, -2)
                d64 = d80;
                dir64 = dir80;
            }
            if (d64 > d79) { // from (-3, -2)
                d64 = d79;
                dir64 = dir79;
            }
            if (d64 > d65) { // from (-2, -3)
                d64 = d65;
                dir64 = dir65;
            }
            d64 += locationScore(l64, m64, dir64);
        }
        else if (rc.onTheMap(l64)) { // check (-3, -3)
            if (d64 > d80) { // from (-2, -2)
                d64 = d80;
                dir64 = dir80;
            }
            if (d64 > d79) { // from (-3, -2)
                d64 = d79;
                dir64 = dir79;
            }
            if (d64 > d65) { // from (-2, -3)
                d64 = d65;
                dir64 = dir65;
            }
            d64 += 12;
        }

        if (rc.canSenseLocation(l154)) { // check (-3, 3)
            if (d154 > d140) { // from (-2, 2)
                d154 = d140;
                dir154 = dir140;
            }
            if (d154 > d139) { // from (-3, 2)
                d154 = d139;
                dir154 = dir139;
            }
            if (d154 > d155) { // from (-2, 3)
                d154 = d155;
                dir154 = dir155;
            }
            d154 += locationScore(l154, m154, dir154);
        }
        else if (rc.onTheMap(l154)) { // check (-3, 3)
            if (d154 > d140) { // from (-2, 2)
                d154 = d140;
                dir154 = dir140;
            }
            if (d154 > d139) { // from (-3, 2)
                d154 = d139;
                dir154 = dir139;
            }
            if (d154 > d155) { // from (-2, 3)
                d154 = d155;
                dir154 = dir155;
            }
            d154 += 12;
        }

        if (rc.canSenseLocation(l70)) { // check (3, -3)
            if (d70 > d84) { // from (2, -2)
                d70 = d84;
                dir70 = dir84;
            }
            if (d70 > d69) { // from (2, -3)
                d70 = d69;
                dir70 = dir69;
            }
            if (d70 > d85) { // from (3, -2)
                d70 = d85;
                dir70 = dir85;
            }
            d70 += locationScore(l70, m70, dir70);
        }
        else if (rc.onTheMap(l70)) { // check (3, -3)
            if (d70 > d84) { // from (2, -2)
                d70 = d84;
                dir70 = dir84;
            }
            if (d70 > d69) { // from (2, -3)
                d70 = d69;
                dir70 = dir69;
            }
            if (d70 > d85) { // from (3, -2)
                d70 = d85;
                dir70 = dir85;
            }
            d70 += 12;
        }

        if (rc.canSenseLocation(l160)) { // check (3, 3)
            if (d160 > d144) { // from (2, 2)
                d160 = d144;
                dir160 = dir144;
            }
            if (d160 > d159) { // from (2, 3)
                d160 = d159;
                dir160 = dir159;
            }
            if (d160 > d145) { // from (3, 2)
                d160 = d145;
                dir160 = dir145;
            }
            d160 += locationScore(l160, m160, dir160);
        }
        else if (rc.onTheMap(l160)) { // check (3, 3)
            if (d160 > d144) { // from (2, 2)
                d160 = d144;
                dir160 = dir144;
            }
            if (d160 > d159) { // from (2, 3)
                d160 = d159;
                dir160 = dir159;
            }
            if (d160 > d145) { // from (3, 2)
                d160 = d145;
                dir160 = dir145;
            }
            d160 += 12;
        }

        if (rc.canSenseLocation(l78)) { // check (-4, -2)
            if (d78 > d94) { // from (-3, -1)
                d78 = d94;
                dir78 = dir94;
            }
            if (d78 > d79) { // from (-3, -2)
                d78 = d79;
                dir78 = dir79;
            }
            if (d78 > d93) { // from (-4, -1)
                d78 = d93;
                dir78 = dir93;
            }
            if (d78 > d64) { // from (-3, -3)
                d78 = d64;
                dir78 = dir64;
            }
            d78 += locationScore(l78, m78, dir78);
        }
        else if (rc.onTheMap(l78)) { // check (-4, -2)
            if (d78 > d94) { // from (-3, -1)
                d78 = d94;
                dir78 = dir94;
            }
            if (d78 > d79) { // from (-3, -2)
                d78 = d79;
                dir78 = dir79;
            }
            if (d78 > d93) { // from (-4, -1)
                d78 = d93;
                dir78 = dir93;
            }
            if (d78 > d64) { // from (-3, -3)
                d78 = d64;
                dir78 = dir64;
            }
            d78 += 12;
        }

        if (rc.canSenseLocation(l138)) { // check (-4, 2)
            if (d138 > d124) { // from (-3, 1)
                d138 = d124;
                dir138 = dir124;
            }
            if (d138 > d139) { // from (-3, 2)
                d138 = d139;
                dir138 = dir139;
            }
            if (d138 > d123) { // from (-4, 1)
                d138 = d123;
                dir138 = dir123;
            }
            if (d138 > d154) { // from (-3, 3)
                d138 = d154;
                dir138 = dir154;
            }
            d138 += locationScore(l138, m138, dir138);
        }
        else if (rc.onTheMap(l138)) { // check (-4, 2)
            if (d138 > d124) { // from (-3, 1)
                d138 = d124;
                dir138 = dir124;
            }
            if (d138 > d139) { // from (-3, 2)
                d138 = d139;
                dir138 = dir139;
            }
            if (d138 > d123) { // from (-4, 1)
                d138 = d123;
                dir138 = dir123;
            }
            if (d138 > d154) { // from (-3, 3)
                d138 = d154;
                dir138 = dir154;
            }
            d138 += 12;
        }

        if (rc.canSenseLocation(l50)) { // check (-2, -4)
            if (d50 > d66) { // from (-1, -3)
                d50 = d66;
                dir50 = dir66;
            }
            if (d50 > d65) { // from (-2, -3)
                d50 = d65;
                dir50 = dir65;
            }
            if (d50 > d51) { // from (-1, -4)
                d50 = d51;
                dir50 = dir51;
            }
            if (d50 > d64) { // from (-3, -3)
                d50 = d64;
                dir50 = dir64;
            }
            d50 += locationScore(l50, m50, dir50);
        }
        else if (rc.onTheMap(l50)) { // check (-2, -4)
            if (d50 > d66) { // from (-1, -3)
                d50 = d66;
                dir50 = dir66;
            }
            if (d50 > d65) { // from (-2, -3)
                d50 = d65;
                dir50 = dir65;
            }
            if (d50 > d51) { // from (-1, -4)
                d50 = d51;
                dir50 = dir51;
            }
            if (d50 > d64) { // from (-3, -3)
                d50 = d64;
                dir50 = dir64;
            }
            d50 += 12;
        }

        if (rc.canSenseLocation(l170)) { // check (-2, 4)
            if (d170 > d156) { // from (-1, 3)
                d170 = d156;
                dir170 = dir156;
            }
            if (d170 > d155) { // from (-2, 3)
                d170 = d155;
                dir170 = dir155;
            }
            if (d170 > d171) { // from (-1, 4)
                d170 = d171;
                dir170 = dir171;
            }
            if (d170 > d154) { // from (-3, 3)
                d170 = d154;
                dir170 = dir154;
            }
            d170 += locationScore(l170, m170, dir170);
        }
        else if (rc.onTheMap(l170)) { // check (-2, 4)
            if (d170 > d156) { // from (-1, 3)
                d170 = d156;
                dir170 = dir156;
            }
            if (d170 > d155) { // from (-2, 3)
                d170 = d155;
                dir170 = dir155;
            }
            if (d170 > d171) { // from (-1, 4)
                d170 = d171;
                dir170 = dir171;
            }
            if (d170 > d154) { // from (-3, 3)
                d170 = d154;
                dir170 = dir154;
            }
            d170 += 12;
        }

        if (rc.canSenseLocation(l54)) { // check (2, -4)
            if (d54 > d68) { // from (1, -3)
                d54 = d68;
                dir54 = dir68;
            }
            if (d54 > d69) { // from (2, -3)
                d54 = d69;
                dir54 = dir69;
            }
            if (d54 > d53) { // from (1, -4)
                d54 = d53;
                dir54 = dir53;
            }
            if (d54 > d70) { // from (3, -3)
                d54 = d70;
                dir54 = dir70;
            }
            d54 += locationScore(l54, m54, dir54);
        }
        else if (rc.onTheMap(l54)) { // check (2, -4)
            if (d54 > d68) { // from (1, -3)
                d54 = d68;
                dir54 = dir68;
            }
            if (d54 > d69) { // from (2, -3)
                d54 = d69;
                dir54 = dir69;
            }
            if (d54 > d53) { // from (1, -4)
                d54 = d53;
                dir54 = dir53;
            }
            if (d54 > d70) { // from (3, -3)
                d54 = d70;
                dir54 = dir70;
            }
            d54 += 12;
        }

        if (rc.canSenseLocation(l174)) { // check (2, 4)
            if (d174 > d158) { // from (1, 3)
                d174 = d158;
                dir174 = dir158;
            }
            if (d174 > d159) { // from (2, 3)
                d174 = d159;
                dir174 = dir159;
            }
            if (d174 > d173) { // from (1, 4)
                d174 = d173;
                dir174 = dir173;
            }
            if (d174 > d160) { // from (3, 3)
                d174 = d160;
                dir174 = dir160;
            }
            d174 += locationScore(l174, m174, dir174);
        }
        else if (rc.onTheMap(l174)) { // check (2, 4)
            if (d174 > d158) { // from (1, 3)
                d174 = d158;
                dir174 = dir158;
            }
            if (d174 > d159) { // from (2, 3)
                d174 = d159;
                dir174 = dir159;
            }
            if (d174 > d173) { // from (1, 4)
                d174 = d173;
                dir174 = dir173;
            }
            if (d174 > d160) { // from (3, 3)
                d174 = d160;
                dir174 = dir160;
            }
            d174 += 12;
        }

        if (rc.canSenseLocation(l86)) { // check (4, -2)
            if (d86 > d100) { // from (3, -1)
                d86 = d100;
                dir86 = dir100;
            }
            if (d86 > d85) { // from (3, -2)
                d86 = d85;
                dir86 = dir85;
            }
            if (d86 > d101) { // from (4, -1)
                d86 = d101;
                dir86 = dir101;
            }
            if (d86 > d70) { // from (3, -3)
                d86 = d70;
                dir86 = dir70;
            }
            d86 += locationScore(l86, m86, dir86);
        }
        else if (rc.onTheMap(l86)) { // check (4, -2)
            if (d86 > d100) { // from (3, -1)
                d86 = d100;
                dir86 = dir100;
            }
            if (d86 > d85) { // from (3, -2)
                d86 = d85;
                dir86 = dir85;
            }
            if (d86 > d101) { // from (4, -1)
                d86 = d101;
                dir86 = dir101;
            }
            if (d86 > d70) { // from (3, -3)
                d86 = d70;
                dir86 = dir70;
            }
            d86 += 12;
        }

        if (rc.canSenseLocation(l146)) { // check (4, 2)
            if (d146 > d130) { // from (3, 1)
                d146 = d130;
                dir146 = dir130;
            }
            if (d146 > d145) { // from (3, 2)
                d146 = d145;
                dir146 = dir145;
            }
            if (d146 > d131) { // from (4, 1)
                d146 = d131;
                dir146 = dir131;
            }
            if (d146 > d160) { // from (3, 3)
                d146 = d160;
                dir146 = dir160;
            }
            d146 += locationScore(l146, m146, dir146);
        }
        else if (rc.onTheMap(l146)) { // check (4, 2)
            if (d146 > d130) { // from (3, 1)
                d146 = d130;
                dir146 = dir130;
            }
            if (d146 > d145) { // from (3, 2)
                d146 = d145;
                dir146 = dir145;
            }
            if (d146 > d131) { // from (4, 1)
                d146 = d131;
                dir146 = dir131;
            }
            if (d146 > d160) { // from (3, 3)
                d146 = d160;
                dir146 = dir160;
            }
            d146 += 12;
        }

        if (rc.canSenseLocation(l107)) { // check (-5, 0)
            if (d107 > d108) { // from (-4, 0)
                d107 = d108;
                dir107 = dir108;
            }
            if (d107 > d93) { // from (-4, -1)
                d107 = d93;
                dir107 = dir93;
            }
            if (d107 > d123) { // from (-4, 1)
                d107 = d123;
                dir107 = dir123;
            }
            d107 += locationScore(l107, m107, dir107);
        }
        else if (rc.onTheMap(l107)) { // check (-5, 0)
            if (d107 > d108) { // from (-4, 0)
                d107 = d108;
                dir107 = dir108;
            }
            if (d107 > d93) { // from (-4, -1)
                d107 = d93;
                dir107 = dir93;
            }
            if (d107 > d123) { // from (-4, 1)
                d107 = d123;
                dir107 = dir123;
            }
            d107 += 12;
        }

        if (rc.canSenseLocation(l63)) { // check (-4, -3)
            if (d63 > d79) { // from (-3, -2)
                d63 = d79;
                dir63 = dir79;
            }
            if (d63 > d64) { // from (-3, -3)
                d63 = d64;
                dir63 = dir64;
            }
            if (d63 > d78) { // from (-4, -2)
                d63 = d78;
                dir63 = dir78;
            }
            d63 += locationScore(l63, m63, dir63);
        }
        else if (rc.onTheMap(l63)) { // check (-4, -3)
            if (d63 > d79) { // from (-3, -2)
                d63 = d79;
                dir63 = dir79;
            }
            if (d63 > d64) { // from (-3, -3)
                d63 = d64;
                dir63 = dir64;
            }
            if (d63 > d78) { // from (-4, -2)
                d63 = d78;
                dir63 = dir78;
            }
            d63 += 12;
        }

        if (rc.canSenseLocation(l153)) { // check (-4, 3)
            if (d153 > d139) { // from (-3, 2)
                d153 = d139;
                dir153 = dir139;
            }
            if (d153 > d154) { // from (-3, 3)
                d153 = d154;
                dir153 = dir154;
            }
            if (d153 > d138) { // from (-4, 2)
                d153 = d138;
                dir153 = dir138;
            }
            d153 += locationScore(l153, m153, dir153);
        }
        else if (rc.onTheMap(l153)) { // check (-4, 3)
            if (d153 > d139) { // from (-3, 2)
                d153 = d139;
                dir153 = dir139;
            }
            if (d153 > d154) { // from (-3, 3)
                d153 = d154;
                dir153 = dir154;
            }
            if (d153 > d138) { // from (-4, 2)
                d153 = d138;
                dir153 = dir138;
            }
            d153 += 12;
        }

        if (rc.canSenseLocation(l49)) { // check (-3, -4)
            if (d49 > d65) { // from (-2, -3)
                d49 = d65;
                dir49 = dir65;
            }
            if (d49 > d64) { // from (-3, -3)
                d49 = d64;
                dir49 = dir64;
            }
            if (d49 > d50) { // from (-2, -4)
                d49 = d50;
                dir49 = dir50;
            }
            if (d49 > d63) { // from (-4, -3)
                d49 = d63;
                dir49 = dir63;
            }
            d49 += locationScore(l49, m49, dir49);
        }
        else if (rc.onTheMap(l49)) { // check (-3, -4)
            if (d49 > d65) { // from (-2, -3)
                d49 = d65;
                dir49 = dir65;
            }
            if (d49 > d64) { // from (-3, -3)
                d49 = d64;
                dir49 = dir64;
            }
            if (d49 > d50) { // from (-2, -4)
                d49 = d50;
                dir49 = dir50;
            }
            if (d49 > d63) { // from (-4, -3)
                d49 = d63;
                dir49 = dir63;
            }
            d49 += 12;
        }

        if (rc.canSenseLocation(l169)) { // check (-3, 4)
            if (d169 > d155) { // from (-2, 3)
                d169 = d155;
                dir169 = dir155;
            }
            if (d169 > d154) { // from (-3, 3)
                d169 = d154;
                dir169 = dir154;
            }
            if (d169 > d170) { // from (-2, 4)
                d169 = d170;
                dir169 = dir170;
            }
            if (d169 > d153) { // from (-4, 3)
                d169 = d153;
                dir169 = dir153;
            }
            d169 += locationScore(l169, m169, dir169);
        }
        else if (rc.onTheMap(l169)) { // check (-3, 4)
            if (d169 > d155) { // from (-2, 3)
                d169 = d155;
                dir169 = dir155;
            }
            if (d169 > d154) { // from (-3, 3)
                d169 = d154;
                dir169 = dir154;
            }
            if (d169 > d170) { // from (-2, 4)
                d169 = d170;
                dir169 = dir170;
            }
            if (d169 > d153) { // from (-4, 3)
                d169 = d153;
                dir169 = dir153;
            }
            d169 += 12;
        }

        if (rc.canSenseLocation(l37)) { // check (0, -5)
            if (d37 > d52) { // from (0, -4)
                d37 = d52;
                dir37 = dir52;
            }
            if (d37 > d51) { // from (-1, -4)
                d37 = d51;
                dir37 = dir51;
            }
            if (d37 > d53) { // from (1, -4)
                d37 = d53;
                dir37 = dir53;
            }
            d37 += locationScore(l37, m37, dir37);
        }
        else if (rc.onTheMap(l37)) { // check (0, -5)
            if (d37 > d52) { // from (0, -4)
                d37 = d52;
                dir37 = dir52;
            }
            if (d37 > d51) { // from (-1, -4)
                d37 = d51;
                dir37 = dir51;
            }
            if (d37 > d53) { // from (1, -4)
                d37 = d53;
                dir37 = dir53;
            }
            d37 += 12;
        }

        if (rc.canSenseLocation(l187)) { // check (0, 5)
            if (d187 > d172) { // from (0, 4)
                d187 = d172;
                dir187 = dir172;
            }
            if (d187 > d171) { // from (-1, 4)
                d187 = d171;
                dir187 = dir171;
            }
            if (d187 > d173) { // from (1, 4)
                d187 = d173;
                dir187 = dir173;
            }
            d187 += locationScore(l187, m187, dir187);
        }
        else if (rc.onTheMap(l187)) { // check (0, 5)
            if (d187 > d172) { // from (0, 4)
                d187 = d172;
                dir187 = dir172;
            }
            if (d187 > d171) { // from (-1, 4)
                d187 = d171;
                dir187 = dir171;
            }
            if (d187 > d173) { // from (1, 4)
                d187 = d173;
                dir187 = dir173;
            }
            d187 += 12;
        }

        if (rc.canSenseLocation(l55)) { // check (3, -4)
            if (d55 > d69) { // from (2, -3)
                d55 = d69;
                dir55 = dir69;
            }
            if (d55 > d70) { // from (3, -3)
                d55 = d70;
                dir55 = dir70;
            }
            if (d55 > d54) { // from (2, -4)
                d55 = d54;
                dir55 = dir54;
            }
            d55 += locationScore(l55, m55, dir55);
        }
        else if (rc.onTheMap(l55)) { // check (3, -4)
            if (d55 > d69) { // from (2, -3)
                d55 = d69;
                dir55 = dir69;
            }
            if (d55 > d70) { // from (3, -3)
                d55 = d70;
                dir55 = dir70;
            }
            if (d55 > d54) { // from (2, -4)
                d55 = d54;
                dir55 = dir54;
            }
            d55 += 12;
        }

        if (rc.canSenseLocation(l175)) { // check (3, 4)
            if (d175 > d159) { // from (2, 3)
                d175 = d159;
                dir175 = dir159;
            }
            if (d175 > d160) { // from (3, 3)
                d175 = d160;
                dir175 = dir160;
            }
            if (d175 > d174) { // from (2, 4)
                d175 = d174;
                dir175 = dir174;
            }
            d175 += locationScore(l175, m175, dir175);
        }
        else if (rc.onTheMap(l175)) { // check (3, 4)
            if (d175 > d159) { // from (2, 3)
                d175 = d159;
                dir175 = dir159;
            }
            if (d175 > d160) { // from (3, 3)
                d175 = d160;
                dir175 = dir160;
            }
            if (d175 > d174) { // from (2, 4)
                d175 = d174;
                dir175 = dir174;
            }
            d175 += 12;
        }

        if (rc.canSenseLocation(l71)) { // check (4, -3)
            if (d71 > d85) { // from (3, -2)
                d71 = d85;
                dir71 = dir85;
            }
            if (d71 > d70) { // from (3, -3)
                d71 = d70;
                dir71 = dir70;
            }
            if (d71 > d86) { // from (4, -2)
                d71 = d86;
                dir71 = dir86;
            }
            if (d71 > d55) { // from (3, -4)
                d71 = d55;
                dir71 = dir55;
            }
            d71 += locationScore(l71, m71, dir71);
        }
        else if (rc.onTheMap(l71)) { // check (4, -3)
            if (d71 > d85) { // from (3, -2)
                d71 = d85;
                dir71 = dir85;
            }
            if (d71 > d70) { // from (3, -3)
                d71 = d70;
                dir71 = dir70;
            }
            if (d71 > d86) { // from (4, -2)
                d71 = d86;
                dir71 = dir86;
            }
            if (d71 > d55) { // from (3, -4)
                d71 = d55;
                dir71 = dir55;
            }
            d71 += 12;
        }

        if (rc.canSenseLocation(l161)) { // check (4, 3)
            if (d161 > d145) { // from (3, 2)
                d161 = d145;
                dir161 = dir145;
            }
            if (d161 > d160) { // from (3, 3)
                d161 = d160;
                dir161 = dir160;
            }
            if (d161 > d146) { // from (4, 2)
                d161 = d146;
                dir161 = dir146;
            }
            if (d161 > d175) { // from (3, 4)
                d161 = d175;
                dir161 = dir175;
            }
            d161 += locationScore(l161, m161, dir161);
        }
        else if (rc.onTheMap(l161)) { // check (4, 3)
            if (d161 > d145) { // from (3, 2)
                d161 = d145;
                dir161 = dir145;
            }
            if (d161 > d160) { // from (3, 3)
                d161 = d160;
                dir161 = dir160;
            }
            if (d161 > d146) { // from (4, 2)
                d161 = d146;
                dir161 = dir146;
            }
            if (d161 > d175) { // from (3, 4)
                d161 = d175;
                dir161 = dir175;
            }
            d161 += 12;
        }

        if (rc.canSenseLocation(l117)) { // check (5, 0)
            if (d117 > d116) { // from (4, 0)
                d117 = d116;
                dir117 = dir116;
            }
            if (d117 > d101) { // from (4, -1)
                d117 = d101;
                dir117 = dir101;
            }
            if (d117 > d131) { // from (4, 1)
                d117 = d131;
                dir117 = dir131;
            }
            d117 += locationScore(l117, m117, dir117);
        }
        else if (rc.onTheMap(l117)) { // check (5, 0)
            if (d117 > d116) { // from (4, 0)
                d117 = d116;
                dir117 = dir116;
            }
            if (d117 > d101) { // from (4, -1)
                d117 = d101;
                dir117 = dir101;
            }
            if (d117 > d131) { // from (4, 1)
                d117 = d131;
                dir117 = dir131;
            }
            d117 += 12;
        }


        // System.out.println("LOCAL DISTANCES:");
        // System.out.println("\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + d187 + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + "\t" + d169 + "\t" + d170 + "\t" + d171 + "\t" + d172 + "\t" + d173 + "\t" + d174 + "\t" + d175 + "\t" + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + d153 + "\t" + d154 + "\t" + d155 + "\t" + d156 + "\t" + d157 + "\t" + d158 + "\t" + d159 + "\t" + d160 + "\t" + d161 + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + d138 + "\t" + d139 + "\t" + d140 + "\t" + d141 + "\t" + d142 + "\t" + d143 + "\t" + d144 + "\t" + d145 + "\t" + d146 + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + d123 + "\t" + d124 + "\t" + d125 + "\t" + d126 + "\t" + d127 + "\t" + d128 + "\t" + d129 + "\t" + d130 + "\t" + d131 + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + d107 + "\t" + d108 + "\t" + d109 + "\t" + d110 + "\t" + d111 + "\t" + d112 + "\t" + d113 + "\t" + d114 + "\t" + d115 + "\t" + d116 + "\t" + d117 + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + d93 + "\t" + d94 + "\t" + d95 + "\t" + d96 + "\t" + d97 + "\t" + d98 + "\t" + d99 + "\t" + d100 + "\t" + d101 + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + d78 + "\t" + d79 + "\t" + d80 + "\t" + d81 + "\t" + d82 + "\t" + d83 + "\t" + d84 + "\t" + d85 + "\t" + d86 + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + d63 + "\t" + d64 + "\t" + d65 + "\t" + d66 + "\t" + d67 + "\t" + d68 + "\t" + d69 + "\t" + d70 + "\t" + d71 + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + "\t" + d49 + "\t" + d50 + "\t" + d51 + "\t" + d52 + "\t" + d53 + "\t" + d54 + "\t" + d55 + "\t" + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + d37 + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t");
        // System.out.println("DIRECTIONS:");
        // System.out.println("\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + dir187 + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + "\t" + dir169 + "\t" + dir170 + "\t" + dir171 + "\t" + dir172 + "\t" + dir173 + "\t" + dir174 + "\t" + dir175 + "\t" + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + dir153 + "\t" + dir154 + "\t" + dir155 + "\t" + dir156 + "\t" + dir157 + "\t" + dir158 + "\t" + dir159 + "\t" + dir160 + "\t" + dir161 + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + dir138 + "\t" + dir139 + "\t" + dir140 + "\t" + dir141 + "\t" + dir142 + "\t" + dir143 + "\t" + dir144 + "\t" + dir145 + "\t" + dir146 + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + dir123 + "\t" + dir124 + "\t" + dir125 + "\t" + dir126 + "\t" + dir127 + "\t" + dir128 + "\t" + dir129 + "\t" + dir130 + "\t" + dir131 + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + dir107 + "\t" + dir108 + "\t" + dir109 + "\t" + dir110 + "\t" + dir111 + "\t" + dir112 + "\t" + dir113 + "\t" + dir114 + "\t" + dir115 + "\t" + dir116 + "\t" + dir117 + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + dir93 + "\t" + dir94 + "\t" + dir95 + "\t" + dir96 + "\t" + dir97 + "\t" + dir98 + "\t" + dir99 + "\t" + dir100 + "\t" + dir101 + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + dir78 + "\t" + dir79 + "\t" + dir80 + "\t" + dir81 + "\t" + dir82 + "\t" + dir83 + "\t" + dir84 + "\t" + dir85 + "\t" + dir86 + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + dir63 + "\t" + dir64 + "\t" + dir65 + "\t" + dir66 + "\t" + dir67 + "\t" + dir68 + "\t" + dir69 + "\t" + dir70 + "\t" + dir71 + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + "\t" + dir49 + "\t" + dir50 + "\t" + dir51 + "\t" + dir52 + "\t" + dir53 + "\t" + dir54 + "\t" + dir55 + "\t" + "\t" + "\t" + "\t");
        // System.out.println("\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + dir37 + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t");

        int target_dx = target.x - l112.x;
        int target_dy = target.y - l112.y;
        switch (target_dx) {
                case -5:
                    switch (target_dy) {
                        case 0:
                            return dir107; // destination is at relative location (-5, 0)
                    }
                    break;
                case -4:
                    switch (target_dy) {
                        case -3:
                            return dir63; // destination is at relative location (-4, -3)
                        case -2:
                            return dir78; // destination is at relative location (-4, -2)
                        case -1:
                            return dir93; // destination is at relative location (-4, -1)
                        case 0:
                            return dir108; // destination is at relative location (-4, 0)
                        case 1:
                            return dir123; // destination is at relative location (-4, 1)
                        case 2:
                            return dir138; // destination is at relative location (-4, 2)
                        case 3:
                            return dir153; // destination is at relative location (-4, 3)
                    }
                    break;
                case -3:
                    switch (target_dy) {
                        case -4:
                            return dir49; // destination is at relative location (-3, -4)
                        case -3:
                            return dir64; // destination is at relative location (-3, -3)
                        case -2:
                            return dir79; // destination is at relative location (-3, -2)
                        case -1:
                            return dir94; // destination is at relative location (-3, -1)
                        case 0:
                            return dir109; // destination is at relative location (-3, 0)
                        case 1:
                            return dir124; // destination is at relative location (-3, 1)
                        case 2:
                            return dir139; // destination is at relative location (-3, 2)
                        case 3:
                            return dir154; // destination is at relative location (-3, 3)
                        case 4:
                            return dir169; // destination is at relative location (-3, 4)
                    }
                    break;
                case -2:
                    switch (target_dy) {
                        case -4:
                            return dir50; // destination is at relative location (-2, -4)
                        case -3:
                            return dir65; // destination is at relative location (-2, -3)
                        case -2:
                            return dir80; // destination is at relative location (-2, -2)
                        case -1:
                            return dir95; // destination is at relative location (-2, -1)
                        case 0:
                            return dir110; // destination is at relative location (-2, 0)
                        case 1:
                            return dir125; // destination is at relative location (-2, 1)
                        case 2:
                            return dir140; // destination is at relative location (-2, 2)
                        case 3:
                            return dir155; // destination is at relative location (-2, 3)
                        case 4:
                            return dir170; // destination is at relative location (-2, 4)
                    }
                    break;
                case -1:
                    switch (target_dy) {
                        case -4:
                            return dir51; // destination is at relative location (-1, -4)
                        case -3:
                            return dir66; // destination is at relative location (-1, -3)
                        case -2:
                            return dir81; // destination is at relative location (-1, -2)
                        case -1:
                            return dir96; // destination is at relative location (-1, -1)
                        case 0:
                            return dir111; // destination is at relative location (-1, 0)
                        case 1:
                            return dir126; // destination is at relative location (-1, 1)
                        case 2:
                            return dir141; // destination is at relative location (-1, 2)
                        case 3:
                            return dir156; // destination is at relative location (-1, 3)
                        case 4:
                            return dir171; // destination is at relative location (-1, 4)
                    }
                    break;
                case 0:
                    switch (target_dy) {
                        case -5:
                            return dir37; // destination is at relative location (0, -5)
                        case -4:
                            return dir52; // destination is at relative location (0, -4)
                        case -3:
                            return dir67; // destination is at relative location (0, -3)
                        case -2:
                            return dir82; // destination is at relative location (0, -2)
                        case -1:
                            return dir97; // destination is at relative location (0, -1)
                        case 0:
                            return dir112; // destination is at relative location (0, 0)
                        case 1:
                            return dir127; // destination is at relative location (0, 1)
                        case 2:
                            return dir142; // destination is at relative location (0, 2)
                        case 3:
                            return dir157; // destination is at relative location (0, 3)
                        case 4:
                            return dir172; // destination is at relative location (0, 4)
                        case 5:
                            return dir187; // destination is at relative location (0, 5)
                    }
                    break;
                case 1:
                    switch (target_dy) {
                        case -4:
                            return dir53; // destination is at relative location (1, -4)
                        case -3:
                            return dir68; // destination is at relative location (1, -3)
                        case -2:
                            return dir83; // destination is at relative location (1, -2)
                        case -1:
                            return dir98; // destination is at relative location (1, -1)
                        case 0:
                            return dir113; // destination is at relative location (1, 0)
                        case 1:
                            return dir128; // destination is at relative location (1, 1)
                        case 2:
                            return dir143; // destination is at relative location (1, 2)
                        case 3:
                            return dir158; // destination is at relative location (1, 3)
                        case 4:
                            return dir173; // destination is at relative location (1, 4)
                    }
                    break;
                case 2:
                    switch (target_dy) {
                        case -4:
                            return dir54; // destination is at relative location (2, -4)
                        case -3:
                            return dir69; // destination is at relative location (2, -3)
                        case -2:
                            return dir84; // destination is at relative location (2, -2)
                        case -1:
                            return dir99; // destination is at relative location (2, -1)
                        case 0:
                            return dir114; // destination is at relative location (2, 0)
                        case 1:
                            return dir129; // destination is at relative location (2, 1)
                        case 2:
                            return dir144; // destination is at relative location (2, 2)
                        case 3:
                            return dir159; // destination is at relative location (2, 3)
                        case 4:
                            return dir174; // destination is at relative location (2, 4)
                    }
                    break;
                case 3:
                    switch (target_dy) {
                        case -4:
                            return dir55; // destination is at relative location (3, -4)
                        case -3:
                            return dir70; // destination is at relative location (3, -3)
                        case -2:
                            return dir85; // destination is at relative location (3, -2)
                        case -1:
                            return dir100; // destination is at relative location (3, -1)
                        case 0:
                            return dir115; // destination is at relative location (3, 0)
                        case 1:
                            return dir130; // destination is at relative location (3, 1)
                        case 2:
                            return dir145; // destination is at relative location (3, 2)
                        case 3:
                            return dir160; // destination is at relative location (3, 3)
                        case 4:
                            return dir175; // destination is at relative location (3, 4)
                    }
                    break;
                case 4:
                    switch (target_dy) {
                        case -3:
                            return dir71; // destination is at relative location (4, -3)
                        case -2:
                            return dir86; // destination is at relative location (4, -2)
                        case -1:
                            return dir101; // destination is at relative location (4, -1)
                        case 0:
                            return dir116; // destination is at relative location (4, 0)
                        case 1:
                            return dir131; // destination is at relative location (4, 1)
                        case 2:
                            return dir146; // destination is at relative location (4, 2)
                        case 3:
                            return dir161; // destination is at relative location (4, 3)
                    }
                    break;
                case 5:
                    switch (target_dy) {
                        case 0:
                            return dir117; // destination is at relative location (5, 0)
                    }
                    break;
        }
        
        Direction ans = null;
        double bestScore = 0;
        double currDist = Math.sqrt(l112.distanceSquaredTo(target));
        double cost = Double.MAX_VALUE;
        
        double score107 = (currDist - Math.sqrt(l107.distanceSquaredTo(target))) / d107;
        if (score107 > bestScore) {
            bestScore = score107;
            ans = dir107;
            cost = d107;
        }

        double score63 = (currDist - Math.sqrt(l63.distanceSquaredTo(target))) / d63;
        if (score63 > bestScore) {
            bestScore = score63;
            ans = dir63;
            cost = d63;
        }

        double score153 = (currDist - Math.sqrt(l153.distanceSquaredTo(target))) / d153;
        if (score153 > bestScore) {
            bestScore = score153;
            ans = dir153;
            cost = d153;
        }

        double score49 = (currDist - Math.sqrt(l49.distanceSquaredTo(target))) / d49;
        if (score49 > bestScore) {
            bestScore = score49;
            ans = dir49;
            cost = d49;
        }

        double score169 = (currDist - Math.sqrt(l169.distanceSquaredTo(target))) / d169;
        if (score169 > bestScore) {
            bestScore = score169;
            ans = dir169;
            cost = d169;
        }

        double score37 = (currDist - Math.sqrt(l37.distanceSquaredTo(target))) / d37;
        if (score37 > bestScore) {
            bestScore = score37;
            ans = dir37;
            cost = d37;
        }

        double score187 = (currDist - Math.sqrt(l187.distanceSquaredTo(target))) / d187;
        if (score187 > bestScore) {
            bestScore = score187;
            ans = dir187;
            cost = d187;
        }

        double score55 = (currDist - Math.sqrt(l55.distanceSquaredTo(target))) / d55;
        if (score55 > bestScore) {
            bestScore = score55;
            ans = dir55;
            cost = d55;
        }

        double score175 = (currDist - Math.sqrt(l175.distanceSquaredTo(target))) / d175;
        if (score175 > bestScore) {
            bestScore = score175;
            ans = dir175;
            cost = d175;
        }

        double score71 = (currDist - Math.sqrt(l71.distanceSquaredTo(target))) / d71;
        if (score71 > bestScore) {
            bestScore = score71;
            ans = dir71;
            cost = d71;
        }

        double score161 = (currDist - Math.sqrt(l161.distanceSquaredTo(target))) / d161;
        if (score161 > bestScore) {
            bestScore = score161;
            ans = dir161;
            cost = d161;
        }

        double score117 = (currDist - Math.sqrt(l117.distanceSquaredTo(target))) / d117;
        if (score117 > bestScore) {
            bestScore = score117;
            ans = dir117;
            cost = d117;
        }

        if (cost > 150){
            Nav.goTo(target);
            return null;
        }
        return ans;
    }

}
